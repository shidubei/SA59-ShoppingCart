import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import clsx from 'clsx';
import { styled } from '@mui/system';
import composeClasses from '@mui/utils/composeClasses';
import { gridClasses, getDataGridUtilityClass } from "../../constants/gridClasses.js";
import { gridDimensionsSelector } from "../../hooks/features/dimensions/gridDimensionsSelectors.js";
import { useGridApiContext } from "../../hooks/utils/useGridApiContext.js";
import { useGridSelector } from "../../hooks/utils/useGridSelector.js";
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = () => {
  const slots = {
    root: ['bottomContainer']
  };
  return composeClasses(slots, getDataGridUtilityClass, {});
};
const Element = styled('div')({
  position: 'sticky',
  zIndex: 4,
  bottom: 'calc(var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))'
});
export function GridBottomContainer(props) {
  const classes = useUtilityClasses();
  const apiRef = useGridApiContext();
  const {
    viewportOuterSize,
    minimumSize,
    hasScrollX,
    scrollbarSize
  } = useGridSelector(apiRef, gridDimensionsSelector);
  const scrollHeight = hasScrollX ? scrollbarSize : 0;
  const offset = Math.max(viewportOuterSize.height - minimumSize.height -
  // Subtract scroll height twice to account for GridVirtualScrollerFiller and horizontal scrollbar
  2 * scrollHeight, 0);
  return /*#__PURE__*/_jsx(Element, _extends({}, props, {
    className: clsx(classes.root, gridClasses['container--bottom']),
    style: {
      transform: `translateY(${offset}px)`
    },
    role: "presentation"
  }));
}