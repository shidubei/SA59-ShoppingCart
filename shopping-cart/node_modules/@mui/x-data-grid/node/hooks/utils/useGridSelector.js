"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGridSelectorV8 = exports.useGridSelector = exports.objectShallowCompare = void 0;
var React = _interopRequireWildcard(require("react"));
var _fastObjectShallowCompare = require("@mui/x-internals/fastObjectShallowCompare");
var _warning = require("@mui/x-internals/warning");
var _useLazyRef = require("./useLazyRef");
var _useOnMount = require("./useOnMount");
function isOutputSelector(selector) {
  return selector.acceptsApiRef;
}
// TODO v8: Remove this function
function applySelector(apiRef, selector) {
  if (isOutputSelector(selector)) {
    return selector(apiRef);
  }
  return selector(apiRef.current.state);
}

// TODO v8: Rename this function to `applySelector`
function applySelectorV8(apiRef, selector, args, instanceId) {
  if (isOutputSelector(selector)) {
    return selector(apiRef, args);
  }
  return selector(apiRef.current.state, instanceId);
}
const defaultCompare = Object.is;
const objectShallowCompare = exports.objectShallowCompare = _fastObjectShallowCompare.fastObjectShallowCompare;
const createRefs = () => ({
  state: null,
  equals: null,
  selector: null
});

// TODO v8: Remove this function
const useGridSelector = (apiRef, selector, equals = defaultCompare) => {
  if (process.env.NODE_ENV !== 'production') {
    if (!apiRef.current.state) {
      (0, _warning.warnOnce)(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);
    }
  }
  const refs = (0, _useLazyRef.useLazyRef)(createRefs);
  const didInit = refs.current.selector !== null;
  const [state, setState] = React.useState(
  // We don't use an initialization function to avoid allocations
  didInit ? null : applySelector(apiRef, selector));
  refs.current.state = state;
  refs.current.equals = equals;
  refs.current.selector = selector;
  (0, _useOnMount.useOnMount)(() => {
    return apiRef.current.store.subscribe(() => {
      const newState = applySelector(apiRef, refs.current.selector);
      if (!refs.current.equals(refs.current.state, newState)) {
        refs.current.state = newState;
        setState(newState);
      }
    });
  });
  return state;
};

// TODO v8: Rename this function to `useGridSelector`
exports.useGridSelector = useGridSelector;
const useGridSelectorV8 = (apiRef, selector, args = undefined, equals = defaultCompare) => {
  if (process.env.NODE_ENV !== 'production') {
    if (!apiRef.current.state) {
      (0, _warning.warnOnce)(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);
    }
  }
  const refs = (0, _useLazyRef.useLazyRef)(createRefs);
  const didInit = refs.current.selector !== null;
  const [state, setState] = React.useState(
  // We don't use an initialization function to avoid allocations
  didInit ? null : applySelectorV8(apiRef, selector, args, apiRef.current.instanceId));
  refs.current.state = state;
  refs.current.equals = equals;
  refs.current.selector = selector;
  (0, _useOnMount.useOnMount)(() => {
    return apiRef.current.store.subscribe(() => {
      const newState = applySelectorV8(apiRef, refs.current.selector, args, apiRef.current.instanceId);
      if (!refs.current.equals(refs.current.state, newState)) {
        refs.current.state = newState;
        setState(newState);
      }
    });
  });
  return state;
};
exports.useGridSelectorV8 = useGridSelectorV8;