{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"column\", \"rowId\", \"editCellState\", \"align\", \"children\", \"colIndex\", \"width\", \"className\", \"style\", \"gridHasScrollX\", \"colSpan\", \"disableDragEvents\", \"isNotVisible\", \"pinnedOffset\", \"pinnedPosition\", \"sectionIndex\", \"sectionLength\", \"gridHasFiller\", \"onClick\", \"onDoubleClick\", \"onMouseDown\", \"onMouseUp\", \"onMouseOver\", \"onKeyDown\", \"onKeyUp\", \"onDragEnter\", \"onDragOver\"],\n  _excluded2 = [\"changeReason\", \"unstable_updateValueOnRender\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef, unstable_composeClasses as composeClasses, unstable_ownerDocument as ownerDocument, unstable_capitalize as capitalize } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { doesSupportPreventScroll } from \"../../utils/doesSupportPreventScroll.js\";\nimport { getDataGridUtilityClass, gridClasses } from \"../../constants/gridClasses.js\";\nimport { GridCellModes } from \"../../models/index.js\";\nimport { useGridSelector, objectShallowCompare } from \"../../hooks/utils/useGridSelector.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { gridFocusCellSelector } from \"../../hooks/features/focus/gridFocusStateSelector.js\";\nimport { MissingRowIdError } from \"../../hooks/features/rows/useGridParamsApi.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../utils/cellBorderUtils.js\";\nimport { GridPinnedColumnPosition } from \"../../hooks/features/columns/gridColumnsInterfaces.js\";\nimport { gridRowSpanningHiddenCellsSelector, gridRowSpanningSpannedCellsSelector } from \"../../hooks/features/rows/gridRowSpanningSelectors.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport let PinnedPosition = /*#__PURE__*/function (PinnedPosition) {\n  PinnedPosition[PinnedPosition[\"NONE\"] = 0] = \"NONE\";\n  PinnedPosition[PinnedPosition[\"LEFT\"] = 1] = \"LEFT\";\n  PinnedPosition[PinnedPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n  PinnedPosition[PinnedPosition[\"VIRTUAL\"] = 3] = \"VIRTUAL\";\n  return PinnedPosition;\n}({});\nexport const gridPinnedColumnPositionLookup = {\n  [PinnedPosition.LEFT]: GridPinnedColumnPosition.LEFT,\n  [PinnedPosition.RIGHT]: GridPinnedColumnPosition.RIGHT,\n  [PinnedPosition.NONE]: undefined,\n  [PinnedPosition.VIRTUAL]: undefined\n};\nconst EMPTY_CELL_PARAMS = {\n  id: -1,\n  field: '__unset__',\n  row: {},\n  rowNode: {\n    id: -1,\n    depth: 0,\n    type: 'leaf',\n    parent: -1,\n    groupingKey: null\n  },\n  colDef: {\n    type: 'string',\n    field: '__unset__',\n    computedWidth: 0\n  },\n  cellMode: GridCellModes.View,\n  hasFocus: false,\n  tabIndex: -1,\n  value: null,\n  formattedValue: '__unset__',\n  isEditable: false,\n  api: {}\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    showLeftBorder,\n    showRightBorder,\n    pinnedPosition,\n    isEditable,\n    isSelected,\n    isSelectionMode,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['cell', `cell--text${capitalize(align)}`, isSelected && 'selected', isEditable && 'cell--editable', showLeftBorder && 'cell--withLeftBorder', showRightBorder && 'cell--withRightBorder', pinnedPosition === PinnedPosition.LEFT && 'cell--pinnedLeft', pinnedPosition === PinnedPosition.RIGHT && 'cell--pinnedRight', isSelectionMode && !isEditable && 'cell--selectionMode']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nlet warnedOnce = false;\n\n// TODO(v7): Removing the wrapper will break the docs performance visualization demo.\n\nconst GridCell = /*#__PURE__*/React.forwardRef(function GridCell(props, ref) {\n  const {\n      column,\n      rowId,\n      editCellState,\n      align,\n      colIndex,\n      width,\n      className,\n      style: styleProp,\n      colSpan,\n      disableDragEvents,\n      isNotVisible,\n      pinnedOffset,\n      pinnedPosition,\n      sectionIndex,\n      sectionLength,\n      gridHasFiller,\n      onClick,\n      onDoubleClick,\n      onMouseDown,\n      onMouseUp,\n      onMouseOver,\n      onKeyDown,\n      onKeyUp,\n      onDragEnter,\n      onDragOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const isRtl = useRtl();\n  const field = column.field;\n  const cellParams = useGridSelector(apiRef, () => {\n    // This is required because `.getCellParams` tries to get the `state.rows.tree` entry\n    // associated with `rowId`/`fieldId`, but this selector runs after the state has been\n    // updated, while `rowId`/`fieldId` reference an entry in the old state.\n    try {\n      const result = apiRef.current.getCellParams(rowId, field);\n      result.api = apiRef.current;\n      return result;\n    } catch (error) {\n      if (error instanceof MissingRowIdError) {\n        return EMPTY_CELL_PARAMS;\n      }\n      throw error;\n    }\n  }, objectShallowCompare);\n  const isSelected = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n    id: rowId,\n    field\n  }));\n  const hiddenCells = useGridSelector(apiRef, gridRowSpanningHiddenCellsSelector);\n  const spannedCells = useGridSelector(apiRef, gridRowSpanningSpannedCellsSelector);\n  const {\n    cellMode,\n    hasFocus,\n    isEditable = false,\n    value\n  } = cellParams;\n  const canManageOwnFocus = column.type === 'actions' && column.getActions?.(apiRef.current.getRowParams(rowId)).some(action => !action.props.disabled);\n  const tabIndex = (cellMode === 'view' || !isEditable) && !canManageOwnFocus ? cellParams.tabIndex : -1;\n  const {\n    classes: rootClasses,\n    getCellClassName\n  } = rootProps;\n\n  // There is a hidden grid state access in `applyPipeProcessor('cellClassName', ...)`\n  const pipesClassName = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n    id: rowId,\n    field\n  }).filter(Boolean).join(' '));\n  const classNames = [pipesClassName];\n  if (column.cellClassName) {\n    classNames.push(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName);\n  }\n  if (column.display === 'flex') {\n    classNames.push(gridClasses['cell--flex']);\n  }\n  if (getCellClassName) {\n    classNames.push(getCellClassName(cellParams));\n  }\n  const valueToRender = cellParams.formattedValue ?? value;\n  const cellRef = React.useRef(null);\n  const handleRef = useForkRef(ref, cellRef);\n  const focusElementRef = React.useRef(null);\n  const isSelectionMode = rootProps.cellSelection ?? false;\n  const position = gridPinnedColumnPositionLookup[pinnedPosition];\n  const showLeftBorder = shouldCellShowLeftBorder(position, sectionIndex);\n  const showRightBorder = shouldCellShowRightBorder(position, sectionIndex, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n  const ownerState = {\n    align,\n    showLeftBorder,\n    showRightBorder,\n    isEditable,\n    classes: rootProps.classes,\n    pinnedPosition,\n    isSelected,\n    isSelectionMode\n  };\n  const classes = useUtilityClasses(ownerState);\n  const publishMouseUp = React.useCallback(eventName => event => {\n    const params = apiRef.current.getCellParams(rowId, field || '');\n    apiRef.current.publishEvent(eventName, params, event);\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n  }, [apiRef, field, onMouseUp, rowId]);\n  const publishMouseDown = React.useCallback(eventName => event => {\n    const params = apiRef.current.getCellParams(rowId, field || '');\n    apiRef.current.publishEvent(eventName, params, event);\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  }, [apiRef, field, onMouseDown, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // The row might have been deleted during the click\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    const params = apiRef.current.getCellParams(rowId, field || '');\n    apiRef.current.publishEvent(eventName, params, event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, field, rowId]);\n  const isCellRowSpanned = hiddenCells[rowId]?.[field] ?? false;\n  const rowSpan = spannedCells[rowId]?.[field] ?? 1;\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        padding: 0,\n        opacity: 0,\n        width: 0,\n        border: 0\n      };\n    }\n    const cellStyle = _extends({\n      '--width': `${width}px`\n    }, styleProp);\n    const isLeftPinned = pinnedPosition === PinnedPosition.LEFT;\n    const isRightPinned = pinnedPosition === PinnedPosition.RIGHT;\n    if (isLeftPinned || isRightPinned) {\n      let side = isLeftPinned ? 'left' : 'right';\n      if (isRtl) {\n        side = isLeftPinned ? 'right' : 'left';\n      }\n      cellStyle[side] = pinnedOffset;\n    }\n    if (rowSpan > 1) {\n      cellStyle.height = `calc(var(--height) * ${rowSpan})`;\n      cellStyle.zIndex = 5;\n    }\n    return cellStyle;\n  }, [width, isNotVisible, styleProp, pinnedOffset, pinnedPosition, isRtl, rowSpan]);\n  React.useEffect(() => {\n    if (!hasFocus || cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {\n      const focusableElement = cellRef.current.querySelector('[tabindex=\"0\"]');\n      const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;\n      if (doesSupportPreventScroll()) {\n        elementToFocus.focus({\n          preventScroll: true\n        });\n      } else {\n        const scrollPosition = apiRef.current.getScrollPosition();\n        elementToFocus.focus();\n        apiRef.current.scroll(scrollPosition);\n      }\n    }\n  }, [hasFocus, cellMode, apiRef]);\n  if (isCellRowSpanned) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      \"data-colindex\": colIndex,\n      role: \"presentation\",\n      style: _extends({\n        width: 'var(--width)'\n      }, style)\n    });\n  }\n  if (cellParams === EMPTY_CELL_PARAMS) {\n    return null;\n  }\n  let handleFocus = other.onFocus;\n  if (process.env.NODE_ENV === 'test' && rootProps.experimentalFeatures?.warnIfFocusStateIsNotSynced) {\n    handleFocus = event => {\n      const focusedCell = gridFocusCellSelector(apiRef);\n      if (focusedCell?.id === rowId && focusedCell.field === field) {\n        if (typeof other.onFocus === 'function') {\n          other.onFocus(event);\n        }\n        return;\n      }\n      if (!warnedOnce) {\n        console.warn([`MUI X: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell?.id}, field=${focusedCell?.field}.`, \"Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.\", 'Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state.'].join('\\n'));\n        warnedOnce = true;\n      }\n    };\n  }\n  let children;\n  let title;\n  if (editCellState === null && column.renderCell) {\n    children = column.renderCell(cellParams);\n  }\n  if (editCellState !== null && column.renderEditCell) {\n    const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2);\n    const formattedValue = column.valueFormatter ? column.valueFormatter(editCellState.value, updatedRow, column, apiRef) : cellParams.formattedValue;\n    const params = _extends({}, cellParams, {\n      row: updatedRow,\n      formattedValue\n    }, editCellStateRest);\n    children = column.renderEditCell(params);\n    classNames.push(gridClasses['cell--editing']);\n    classNames.push(rootClasses?.['cell--editing']);\n  }\n  if (children === undefined) {\n    const valueString = valueToRender?.toString();\n    children = valueString;\n    title = valueString;\n  }\n  if (/*#__PURE__*/React.isValidElement(children) && canManageOwnFocus) {\n    children = /*#__PURE__*/React.cloneElement(children, {\n      focusElementRef\n    });\n  }\n  const draggableEventHandlers = disableDragEvents ? null : {\n    onDragEnter: publish('cellDragEnter', onDragEnter),\n    onDragOver: publish('cellDragOver', onDragOver)\n  };\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: handleRef,\n    className: clsx(classes.root, classNames, className),\n    role: \"gridcell\",\n    \"data-field\": field,\n    \"data-colindex\": colIndex,\n    \"aria-colindex\": colIndex + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-rowspan\": rowSpan,\n    style: style,\n    title: title,\n    tabIndex: tabIndex,\n    onClick: publish('cellClick', onClick),\n    onDoubleClick: publish('cellDoubleClick', onDoubleClick),\n    onMouseOver: publish('cellMouseOver', onMouseOver),\n    onMouseDown: publishMouseDown('cellMouseDown'),\n    onMouseUp: publishMouseUp('cellMouseUp'),\n    onKeyDown: publish('cellKeyDown', onKeyDown),\n    onKeyUp: publish('cellKeyUp', onKeyUp)\n  }, draggableEventHandlers, other, {\n    onFocus: handleFocus,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  align: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n  className: PropTypes.string,\n  colIndex: PropTypes.number.isRequired,\n  colSpan: PropTypes.number,\n  column: PropTypes.object.isRequired,\n  disableDragEvents: PropTypes.bool,\n  editCellState: PropTypes.shape({\n    changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n    isProcessingProps: PropTypes.bool,\n    isValidating: PropTypes.bool,\n    value: PropTypes.any\n  }),\n  gridHasFiller: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  pinnedOffset: PropTypes.number.isRequired,\n  pinnedPosition: PropTypes.oneOf([0, 1, 2, 3]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  sectionIndex: PropTypes.number.isRequired,\n  sectionLength: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n} : void 0;\nconst MemoizedGridCell = fastMemo(GridCell);\nexport { MemoizedGridCell as GridCell };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","clsx","unstable_useForkRef","useForkRef","unstable_composeClasses","composeClasses","unstable_ownerDocument","ownerDocument","unstable_capitalize","capitalize","fastMemo","useRtl","doesSupportPreventScroll","getDataGridUtilityClass","gridClasses","GridCellModes","useGridSelector","objectShallowCompare","useGridApiContext","useGridRootProps","gridFocusCellSelector","MissingRowIdError","shouldCellShowLeftBorder","shouldCellShowRightBorder","GridPinnedColumnPosition","gridRowSpanningHiddenCellsSelector","gridRowSpanningSpannedCellsSelector","jsx","_jsx","PinnedPosition","gridPinnedColumnPositionLookup","LEFT","RIGHT","NONE","undefined","VIRTUAL","EMPTY_CELL_PARAMS","id","field","row","rowNode","depth","type","parent","groupingKey","colDef","computedWidth","cellMode","View","hasFocus","tabIndex","value","formattedValue","isEditable","api","useUtilityClasses","ownerState","align","showLeftBorder","showRightBorder","pinnedPosition","isSelected","isSelectionMode","classes","slots","root","warnedOnce","GridCell","forwardRef","props","ref","column","rowId","editCellState","colIndex","width","className","style","styleProp","colSpan","disableDragEvents","isNotVisible","pinnedOffset","sectionIndex","sectionLength","gridHasFiller","onClick","onDoubleClick","onMouseDown","onMouseUp","onMouseOver","onKeyDown","onKeyUp","onDragEnter","onDragOver","other","apiRef","rootProps","isRtl","cellParams","result","current","getCellParams","error","unstable_applyPipeProcessors","hiddenCells","spannedCells","canManageOwnFocus","getActions","getRowParams","some","action","disabled","rootClasses","getCellClassName","pipesClassName","filter","Boolean","join","classNames","cellClassName","push","display","valueToRender","cellRef","useRef","handleRef","focusElementRef","cellSelection","position","showCellVerticalBorder","publishMouseUp","useCallback","eventName","event","params","publishEvent","publishMouseDown","publish","propHandler","getRow","isCellRowSpanned","rowSpan","useMemo","padding","opacity","border","cellStyle","isLeftPinned","isRightPinned","side","height","zIndex","useEffect","Edit","doc","rootElementRef","contains","activeElement","focusableElement","querySelector","elementToFocus","focus","preventScroll","scrollPosition","getScrollPosition","scroll","role","handleFocus","onFocus","process","env","NODE_ENV","experimentalFeatures","warnIfFocusStateIsNotSynced","focusedCell","console","warn","children","title","renderCell","renderEditCell","updatedRow","getRowWithUpdatedValues","editCellStateRest","valueFormatter","valueString","toString","isValidElement","cloneElement","draggableEventHandlers","propTypes","oneOf","isRequired","string","number","object","bool","shape","changeReason","isProcessingProps","isValidating","any","func","oneOfType","MemoizedGridCell"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/components/cell/GridCell.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"column\", \"rowId\", \"editCellState\", \"align\", \"children\", \"colIndex\", \"width\", \"className\", \"style\", \"gridHasScrollX\", \"colSpan\", \"disableDragEvents\", \"isNotVisible\", \"pinnedOffset\", \"pinnedPosition\", \"sectionIndex\", \"sectionLength\", \"gridHasFiller\", \"onClick\", \"onDoubleClick\", \"onMouseDown\", \"onMouseUp\", \"onMouseOver\", \"onKeyDown\", \"onKeyUp\", \"onDragEnter\", \"onDragOver\"],\n  _excluded2 = [\"changeReason\", \"unstable_updateValueOnRender\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef, unstable_composeClasses as composeClasses, unstable_ownerDocument as ownerDocument, unstable_capitalize as capitalize } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { doesSupportPreventScroll } from \"../../utils/doesSupportPreventScroll.js\";\nimport { getDataGridUtilityClass, gridClasses } from \"../../constants/gridClasses.js\";\nimport { GridCellModes } from \"../../models/index.js\";\nimport { useGridSelector, objectShallowCompare } from \"../../hooks/utils/useGridSelector.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { gridFocusCellSelector } from \"../../hooks/features/focus/gridFocusStateSelector.js\";\nimport { MissingRowIdError } from \"../../hooks/features/rows/useGridParamsApi.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../utils/cellBorderUtils.js\";\nimport { GridPinnedColumnPosition } from \"../../hooks/features/columns/gridColumnsInterfaces.js\";\nimport { gridRowSpanningHiddenCellsSelector, gridRowSpanningSpannedCellsSelector } from \"../../hooks/features/rows/gridRowSpanningSelectors.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport let PinnedPosition = /*#__PURE__*/function (PinnedPosition) {\n  PinnedPosition[PinnedPosition[\"NONE\"] = 0] = \"NONE\";\n  PinnedPosition[PinnedPosition[\"LEFT\"] = 1] = \"LEFT\";\n  PinnedPosition[PinnedPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n  PinnedPosition[PinnedPosition[\"VIRTUAL\"] = 3] = \"VIRTUAL\";\n  return PinnedPosition;\n}({});\nexport const gridPinnedColumnPositionLookup = {\n  [PinnedPosition.LEFT]: GridPinnedColumnPosition.LEFT,\n  [PinnedPosition.RIGHT]: GridPinnedColumnPosition.RIGHT,\n  [PinnedPosition.NONE]: undefined,\n  [PinnedPosition.VIRTUAL]: undefined\n};\nconst EMPTY_CELL_PARAMS = {\n  id: -1,\n  field: '__unset__',\n  row: {},\n  rowNode: {\n    id: -1,\n    depth: 0,\n    type: 'leaf',\n    parent: -1,\n    groupingKey: null\n  },\n  colDef: {\n    type: 'string',\n    field: '__unset__',\n    computedWidth: 0\n  },\n  cellMode: GridCellModes.View,\n  hasFocus: false,\n  tabIndex: -1,\n  value: null,\n  formattedValue: '__unset__',\n  isEditable: false,\n  api: {}\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    showLeftBorder,\n    showRightBorder,\n    pinnedPosition,\n    isEditable,\n    isSelected,\n    isSelectionMode,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['cell', `cell--text${capitalize(align)}`, isSelected && 'selected', isEditable && 'cell--editable', showLeftBorder && 'cell--withLeftBorder', showRightBorder && 'cell--withRightBorder', pinnedPosition === PinnedPosition.LEFT && 'cell--pinnedLeft', pinnedPosition === PinnedPosition.RIGHT && 'cell--pinnedRight', isSelectionMode && !isEditable && 'cell--selectionMode']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nlet warnedOnce = false;\n\n// TODO(v7): Removing the wrapper will break the docs performance visualization demo.\n\nconst GridCell = /*#__PURE__*/React.forwardRef(function GridCell(props, ref) {\n  const {\n      column,\n      rowId,\n      editCellState,\n      align,\n      colIndex,\n      width,\n      className,\n      style: styleProp,\n      colSpan,\n      disableDragEvents,\n      isNotVisible,\n      pinnedOffset,\n      pinnedPosition,\n      sectionIndex,\n      sectionLength,\n      gridHasFiller,\n      onClick,\n      onDoubleClick,\n      onMouseDown,\n      onMouseUp,\n      onMouseOver,\n      onKeyDown,\n      onKeyUp,\n      onDragEnter,\n      onDragOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const isRtl = useRtl();\n  const field = column.field;\n  const cellParams = useGridSelector(apiRef, () => {\n    // This is required because `.getCellParams` tries to get the `state.rows.tree` entry\n    // associated with `rowId`/`fieldId`, but this selector runs after the state has been\n    // updated, while `rowId`/`fieldId` reference an entry in the old state.\n    try {\n      const result = apiRef.current.getCellParams(rowId, field);\n      result.api = apiRef.current;\n      return result;\n    } catch (error) {\n      if (error instanceof MissingRowIdError) {\n        return EMPTY_CELL_PARAMS;\n      }\n      throw error;\n    }\n  }, objectShallowCompare);\n  const isSelected = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n    id: rowId,\n    field\n  }));\n  const hiddenCells = useGridSelector(apiRef, gridRowSpanningHiddenCellsSelector);\n  const spannedCells = useGridSelector(apiRef, gridRowSpanningSpannedCellsSelector);\n  const {\n    cellMode,\n    hasFocus,\n    isEditable = false,\n    value\n  } = cellParams;\n  const canManageOwnFocus = column.type === 'actions' && column.getActions?.(apiRef.current.getRowParams(rowId)).some(action => !action.props.disabled);\n  const tabIndex = (cellMode === 'view' || !isEditable) && !canManageOwnFocus ? cellParams.tabIndex : -1;\n  const {\n    classes: rootClasses,\n    getCellClassName\n  } = rootProps;\n\n  // There is a hidden grid state access in `applyPipeProcessor('cellClassName', ...)`\n  const pipesClassName = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n    id: rowId,\n    field\n  }).filter(Boolean).join(' '));\n  const classNames = [pipesClassName];\n  if (column.cellClassName) {\n    classNames.push(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName);\n  }\n  if (column.display === 'flex') {\n    classNames.push(gridClasses['cell--flex']);\n  }\n  if (getCellClassName) {\n    classNames.push(getCellClassName(cellParams));\n  }\n  const valueToRender = cellParams.formattedValue ?? value;\n  const cellRef = React.useRef(null);\n  const handleRef = useForkRef(ref, cellRef);\n  const focusElementRef = React.useRef(null);\n  const isSelectionMode = rootProps.cellSelection ?? false;\n  const position = gridPinnedColumnPositionLookup[pinnedPosition];\n  const showLeftBorder = shouldCellShowLeftBorder(position, sectionIndex);\n  const showRightBorder = shouldCellShowRightBorder(position, sectionIndex, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n  const ownerState = {\n    align,\n    showLeftBorder,\n    showRightBorder,\n    isEditable,\n    classes: rootProps.classes,\n    pinnedPosition,\n    isSelected,\n    isSelectionMode\n  };\n  const classes = useUtilityClasses(ownerState);\n  const publishMouseUp = React.useCallback(eventName => event => {\n    const params = apiRef.current.getCellParams(rowId, field || '');\n    apiRef.current.publishEvent(eventName, params, event);\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n  }, [apiRef, field, onMouseUp, rowId]);\n  const publishMouseDown = React.useCallback(eventName => event => {\n    const params = apiRef.current.getCellParams(rowId, field || '');\n    apiRef.current.publishEvent(eventName, params, event);\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  }, [apiRef, field, onMouseDown, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // The row might have been deleted during the click\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    const params = apiRef.current.getCellParams(rowId, field || '');\n    apiRef.current.publishEvent(eventName, params, event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, field, rowId]);\n  const isCellRowSpanned = hiddenCells[rowId]?.[field] ?? false;\n  const rowSpan = spannedCells[rowId]?.[field] ?? 1;\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        padding: 0,\n        opacity: 0,\n        width: 0,\n        border: 0\n      };\n    }\n    const cellStyle = _extends({\n      '--width': `${width}px`\n    }, styleProp);\n    const isLeftPinned = pinnedPosition === PinnedPosition.LEFT;\n    const isRightPinned = pinnedPosition === PinnedPosition.RIGHT;\n    if (isLeftPinned || isRightPinned) {\n      let side = isLeftPinned ? 'left' : 'right';\n      if (isRtl) {\n        side = isLeftPinned ? 'right' : 'left';\n      }\n      cellStyle[side] = pinnedOffset;\n    }\n    if (rowSpan > 1) {\n      cellStyle.height = `calc(var(--height) * ${rowSpan})`;\n      cellStyle.zIndex = 5;\n    }\n    return cellStyle;\n  }, [width, isNotVisible, styleProp, pinnedOffset, pinnedPosition, isRtl, rowSpan]);\n  React.useEffect(() => {\n    if (!hasFocus || cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {\n      const focusableElement = cellRef.current.querySelector('[tabindex=\"0\"]');\n      const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;\n      if (doesSupportPreventScroll()) {\n        elementToFocus.focus({\n          preventScroll: true\n        });\n      } else {\n        const scrollPosition = apiRef.current.getScrollPosition();\n        elementToFocus.focus();\n        apiRef.current.scroll(scrollPosition);\n      }\n    }\n  }, [hasFocus, cellMode, apiRef]);\n  if (isCellRowSpanned) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      \"data-colindex\": colIndex,\n      role: \"presentation\",\n      style: _extends({\n        width: 'var(--width)'\n      }, style)\n    });\n  }\n  if (cellParams === EMPTY_CELL_PARAMS) {\n    return null;\n  }\n  let handleFocus = other.onFocus;\n  if (process.env.NODE_ENV === 'test' && rootProps.experimentalFeatures?.warnIfFocusStateIsNotSynced) {\n    handleFocus = event => {\n      const focusedCell = gridFocusCellSelector(apiRef);\n      if (focusedCell?.id === rowId && focusedCell.field === field) {\n        if (typeof other.onFocus === 'function') {\n          other.onFocus(event);\n        }\n        return;\n      }\n      if (!warnedOnce) {\n        console.warn([`MUI X: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell?.id}, field=${focusedCell?.field}.`, \"Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.\", 'Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state.'].join('\\n'));\n        warnedOnce = true;\n      }\n    };\n  }\n  let children;\n  let title;\n  if (editCellState === null && column.renderCell) {\n    children = column.renderCell(cellParams);\n  }\n  if (editCellState !== null && column.renderEditCell) {\n    const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2);\n    const formattedValue = column.valueFormatter ? column.valueFormatter(editCellState.value, updatedRow, column, apiRef) : cellParams.formattedValue;\n    const params = _extends({}, cellParams, {\n      row: updatedRow,\n      formattedValue\n    }, editCellStateRest);\n    children = column.renderEditCell(params);\n    classNames.push(gridClasses['cell--editing']);\n    classNames.push(rootClasses?.['cell--editing']);\n  }\n  if (children === undefined) {\n    const valueString = valueToRender?.toString();\n    children = valueString;\n    title = valueString;\n  }\n  if (/*#__PURE__*/React.isValidElement(children) && canManageOwnFocus) {\n    children = /*#__PURE__*/React.cloneElement(children, {\n      focusElementRef\n    });\n  }\n  const draggableEventHandlers = disableDragEvents ? null : {\n    onDragEnter: publish('cellDragEnter', onDragEnter),\n    onDragOver: publish('cellDragOver', onDragOver)\n  };\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: handleRef,\n    className: clsx(classes.root, classNames, className),\n    role: \"gridcell\",\n    \"data-field\": field,\n    \"data-colindex\": colIndex,\n    \"aria-colindex\": colIndex + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-rowspan\": rowSpan,\n    style: style,\n    title: title,\n    tabIndex: tabIndex,\n    onClick: publish('cellClick', onClick),\n    onDoubleClick: publish('cellDoubleClick', onDoubleClick),\n    onMouseOver: publish('cellMouseOver', onMouseOver),\n    onMouseDown: publishMouseDown('cellMouseDown'),\n    onMouseUp: publishMouseUp('cellMouseUp'),\n    onKeyDown: publish('cellKeyDown', onKeyDown),\n    onKeyUp: publish('cellKeyUp', onKeyUp)\n  }, draggableEventHandlers, other, {\n    onFocus: handleFocus,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  align: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n  className: PropTypes.string,\n  colIndex: PropTypes.number.isRequired,\n  colSpan: PropTypes.number,\n  column: PropTypes.object.isRequired,\n  disableDragEvents: PropTypes.bool,\n  editCellState: PropTypes.shape({\n    changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n    isProcessingProps: PropTypes.bool,\n    isValidating: PropTypes.bool,\n    value: PropTypes.any\n  }),\n  gridHasFiller: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  pinnedOffset: PropTypes.number.isRequired,\n  pinnedPosition: PropTypes.oneOf([0, 1, 2, 3]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  sectionIndex: PropTypes.number.isRequired,\n  sectionLength: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n} : void 0;\nconst MemoizedGridCell = fastMemo(GridCell);\nexport { MemoizedGridCell as GridCell };"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,mBAAmB,EAAE,cAAc,EAAE,cAAc,EAAE,gBAAgB,EAAE,cAAc,EAAE,eAAe,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,WAAW,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,CAAC;EACtYC,UAAU,GAAG,CAAC,cAAc,EAAE,8BAA8B,CAAC;AAC/D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,mBAAmB,IAAIC,UAAU,EAAEC,uBAAuB,IAAIC,cAAc,EAAEC,sBAAsB,IAAIC,aAAa,EAAEC,mBAAmB,IAAIC,UAAU,QAAQ,YAAY;AACrL,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,wBAAwB,QAAQ,yCAAyC;AAClF,SAASC,uBAAuB,EAAEC,WAAW,QAAQ,gCAAgC;AACrF,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,sCAAsC;AAC5F,SAASC,iBAAiB,QAAQ,wCAAwC;AAC1E,SAASC,gBAAgB,QAAQ,uCAAuC;AACxE,SAASC,qBAAqB,QAAQ,sDAAsD;AAC5F,SAASC,iBAAiB,QAAQ,+CAA+C;AACjF,SAASC,wBAAwB,EAAEC,yBAAyB,QAAQ,gCAAgC;AACpG,SAASC,wBAAwB,QAAQ,uDAAuD;AAChG,SAASC,kCAAkC,EAAEC,mCAAmC,QAAQ,uDAAuD;AAC/I,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,IAAIC,cAAc,GAAG,aAAa,UAAUA,cAAc,EAAE;EACjEA,cAAc,CAACA,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACnDA,cAAc,CAACA,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACnDA,cAAc,CAACA,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACrDA,cAAc,CAACA,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACzD,OAAOA,cAAc;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,OAAO,MAAMC,8BAA8B,GAAG;EAC5C,CAACD,cAAc,CAACE,IAAI,GAAGP,wBAAwB,CAACO,IAAI;EACpD,CAACF,cAAc,CAACG,KAAK,GAAGR,wBAAwB,CAACQ,KAAK;EACtD,CAACH,cAAc,CAACI,IAAI,GAAGC,SAAS;EAChC,CAACL,cAAc,CAACM,OAAO,GAAGD;AAC5B,CAAC;AACD,MAAME,iBAAiB,GAAG;EACxBC,EAAE,EAAE,CAAC,CAAC;EACNC,KAAK,EAAE,WAAW;EAClBC,GAAG,EAAE,CAAC,CAAC;EACPC,OAAO,EAAE;IACPH,EAAE,EAAE,CAAC,CAAC;IACNI,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE,MAAM;IACZC,MAAM,EAAE,CAAC,CAAC;IACVC,WAAW,EAAE;EACf,CAAC;EACDC,MAAM,EAAE;IACNH,IAAI,EAAE,QAAQ;IACdJ,KAAK,EAAE,WAAW;IAClBQ,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAEhC,aAAa,CAACiC,IAAI;EAC5BC,QAAQ,EAAE,KAAK;EACfC,QAAQ,EAAE,CAAC,CAAC;EACZC,KAAK,EAAE,IAAI;EACXC,cAAc,EAAE,WAAW;EAC3BC,UAAU,EAAE,KAAK;EACjBC,GAAG,EAAE,CAAC;AACR,CAAC;AACD,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;EACtC,MAAM;IACJC,KAAK;IACLC,cAAc;IACdC,eAAe;IACfC,cAAc;IACdP,UAAU;IACVQ,UAAU;IACVC,eAAe;IACfC;EACF,CAAC,GAAGP,UAAU;EACd,MAAMQ,KAAK,GAAG;IACZC,IAAI,EAAE,CAAC,MAAM,EAAE,aAAaxD,UAAU,CAACgD,KAAK,CAAC,EAAE,EAAEI,UAAU,IAAI,UAAU,EAAER,UAAU,IAAI,gBAAgB,EAAEK,cAAc,IAAI,sBAAsB,EAAEC,eAAe,IAAI,uBAAuB,EAAEC,cAAc,KAAK/B,cAAc,CAACE,IAAI,IAAI,kBAAkB,EAAE6B,cAAc,KAAK/B,cAAc,CAACG,KAAK,IAAI,mBAAmB,EAAE8B,eAAe,IAAI,CAACT,UAAU,IAAI,qBAAqB;EACxX,CAAC;EACD,OAAOhD,cAAc,CAAC2D,KAAK,EAAEnD,uBAAuB,EAAEkD,OAAO,CAAC;AAChE,CAAC;AACD,IAAIG,UAAU,GAAG,KAAK;;AAEtB;;AAEA,MAAMC,QAAQ,GAAG,aAAapE,KAAK,CAACqE,UAAU,CAAC,SAASD,QAAQA,CAACE,KAAK,EAAEC,GAAG,EAAE;EAC3E,MAAM;MACFC,MAAM;MACNC,KAAK;MACLC,aAAa;MACbhB,KAAK;MACLiB,QAAQ;MACRC,KAAK;MACLC,SAAS;MACTC,KAAK,EAAEC,SAAS;MAChBC,OAAO;MACPC,iBAAiB;MACjBC,YAAY;MACZC,YAAY;MACZtB,cAAc;MACduB,YAAY;MACZC,aAAa;MACbC,aAAa;MACbC,OAAO;MACPC,aAAa;MACbC,WAAW;MACXC,SAAS;MACTC,WAAW;MACXC,SAAS;MACTC,OAAO;MACPC,WAAW;MACXC;IACF,CAAC,GAAGzB,KAAK;IACT0B,KAAK,GAAGnG,6BAA6B,CAACyE,KAAK,EAAExE,SAAS,CAAC;EACzD,MAAMmG,MAAM,GAAG9E,iBAAiB,CAAC,CAAC;EAClC,MAAM+E,SAAS,GAAG9E,gBAAgB,CAAC,CAAC;EACpC,MAAM+E,KAAK,GAAGvF,MAAM,CAAC,CAAC;EACtB,MAAM2B,KAAK,GAAGiC,MAAM,CAACjC,KAAK;EAC1B,MAAM6D,UAAU,GAAGnF,eAAe,CAACgF,MAAM,EAAE,MAAM;IAC/C;IACA;IACA;IACA,IAAI;MACF,MAAMI,MAAM,GAAGJ,MAAM,CAACK,OAAO,CAACC,aAAa,CAAC9B,KAAK,EAAElC,KAAK,CAAC;MACzD8D,MAAM,CAAC9C,GAAG,GAAG0C,MAAM,CAACK,OAAO;MAC3B,OAAOD,MAAM;IACf,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYlF,iBAAiB,EAAE;QACtC,OAAOe,iBAAiB;MAC1B;MACA,MAAMmE,KAAK;IACb;EACF,CAAC,EAAEtF,oBAAoB,CAAC;EACxB,MAAM4C,UAAU,GAAG7C,eAAe,CAACgF,MAAM,EAAE,MAAMA,MAAM,CAACK,OAAO,CAACG,4BAA4B,CAAC,gBAAgB,EAAE,KAAK,EAAE;IACpHnE,EAAE,EAAEmC,KAAK;IACTlC;EACF,CAAC,CAAC,CAAC;EACH,MAAMmE,WAAW,GAAGzF,eAAe,CAACgF,MAAM,EAAEvE,kCAAkC,CAAC;EAC/E,MAAMiF,YAAY,GAAG1F,eAAe,CAACgF,MAAM,EAAEtE,mCAAmC,CAAC;EACjF,MAAM;IACJqB,QAAQ;IACRE,QAAQ;IACRI,UAAU,GAAG,KAAK;IAClBF;EACF,CAAC,GAAGgD,UAAU;EACd,MAAMQ,iBAAiB,GAAGpC,MAAM,CAAC7B,IAAI,KAAK,SAAS,IAAI6B,MAAM,CAACqC,UAAU,GAAGZ,MAAM,CAACK,OAAO,CAACQ,YAAY,CAACrC,KAAK,CAAC,CAAC,CAACsC,IAAI,CAACC,MAAM,IAAI,CAACA,MAAM,CAAC1C,KAAK,CAAC2C,QAAQ,CAAC;EACrJ,MAAM9D,QAAQ,GAAG,CAACH,QAAQ,KAAK,MAAM,IAAI,CAACM,UAAU,KAAK,CAACsD,iBAAiB,GAAGR,UAAU,CAACjD,QAAQ,GAAG,CAAC,CAAC;EACtG,MAAM;IACJa,OAAO,EAAEkD,WAAW;IACpBC;EACF,CAAC,GAAGjB,SAAS;;EAEb;EACA,MAAMkB,cAAc,GAAGnG,eAAe,CAACgF,MAAM,EAAE,MAAMA,MAAM,CAACK,OAAO,CAACG,4BAA4B,CAAC,eAAe,EAAE,EAAE,EAAE;IACpHnE,EAAE,EAAEmC,KAAK;IACTlC;EACF,CAAC,CAAC,CAAC8E,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;EAC7B,MAAMC,UAAU,GAAG,CAACJ,cAAc,CAAC;EACnC,IAAI5C,MAAM,CAACiD,aAAa,EAAE;IACxBD,UAAU,CAACE,IAAI,CAAC,OAAOlD,MAAM,CAACiD,aAAa,KAAK,UAAU,GAAGjD,MAAM,CAACiD,aAAa,CAACrB,UAAU,CAAC,GAAG5B,MAAM,CAACiD,aAAa,CAAC;EACvH;EACA,IAAIjD,MAAM,CAACmD,OAAO,KAAK,MAAM,EAAE;IAC7BH,UAAU,CAACE,IAAI,CAAC3G,WAAW,CAAC,YAAY,CAAC,CAAC;EAC5C;EACA,IAAIoG,gBAAgB,EAAE;IACpBK,UAAU,CAACE,IAAI,CAACP,gBAAgB,CAACf,UAAU,CAAC,CAAC;EAC/C;EACA,MAAMwB,aAAa,GAAGxB,UAAU,CAAC/C,cAAc,IAAID,KAAK;EACxD,MAAMyE,OAAO,GAAG7H,KAAK,CAAC8H,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMC,SAAS,GAAG3H,UAAU,CAACmE,GAAG,EAAEsD,OAAO,CAAC;EAC1C,MAAMG,eAAe,GAAGhI,KAAK,CAAC8H,MAAM,CAAC,IAAI,CAAC;EAC1C,MAAM/D,eAAe,GAAGmC,SAAS,CAAC+B,aAAa,IAAI,KAAK;EACxD,MAAMC,QAAQ,GAAGnG,8BAA8B,CAAC8B,cAAc,CAAC;EAC/D,MAAMF,cAAc,GAAGpC,wBAAwB,CAAC2G,QAAQ,EAAE9C,YAAY,CAAC;EACvE,MAAMxB,eAAe,GAAGpC,yBAAyB,CAAC0G,QAAQ,EAAE9C,YAAY,EAAEC,aAAa,EAAEa,SAAS,CAACiC,sBAAsB,EAAE7C,aAAa,CAAC;EACzI,MAAM7B,UAAU,GAAG;IACjBC,KAAK;IACLC,cAAc;IACdC,eAAe;IACfN,UAAU;IACVU,OAAO,EAAEkC,SAAS,CAAClC,OAAO;IAC1BH,cAAc;IACdC,UAAU;IACVC;EACF,CAAC;EACD,MAAMC,OAAO,GAAGR,iBAAiB,CAACC,UAAU,CAAC;EAC7C,MAAM2E,cAAc,GAAGpI,KAAK,CAACqI,WAAW,CAACC,SAAS,IAAIC,KAAK,IAAI;IAC7D,MAAMC,MAAM,GAAGvC,MAAM,CAACK,OAAO,CAACC,aAAa,CAAC9B,KAAK,EAAElC,KAAK,IAAI,EAAE,CAAC;IAC/D0D,MAAM,CAACK,OAAO,CAACmC,YAAY,CAACH,SAAS,EAAEE,MAAM,EAAED,KAAK,CAAC;IACrD,IAAI7C,SAAS,EAAE;MACbA,SAAS,CAAC6C,KAAK,CAAC;IAClB;EACF,CAAC,EAAE,CAACtC,MAAM,EAAE1D,KAAK,EAAEmD,SAAS,EAAEjB,KAAK,CAAC,CAAC;EACrC,MAAMiE,gBAAgB,GAAG1I,KAAK,CAACqI,WAAW,CAACC,SAAS,IAAIC,KAAK,IAAI;IAC/D,MAAMC,MAAM,GAAGvC,MAAM,CAACK,OAAO,CAACC,aAAa,CAAC9B,KAAK,EAAElC,KAAK,IAAI,EAAE,CAAC;IAC/D0D,MAAM,CAACK,OAAO,CAACmC,YAAY,CAACH,SAAS,EAAEE,MAAM,EAAED,KAAK,CAAC;IACrD,IAAI9C,WAAW,EAAE;MACfA,WAAW,CAAC8C,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,CAACtC,MAAM,EAAE1D,KAAK,EAAEkD,WAAW,EAAEhB,KAAK,CAAC,CAAC;EACvC,MAAMkE,OAAO,GAAG3I,KAAK,CAACqI,WAAW,CAAC,CAACC,SAAS,EAAEM,WAAW,KAAKL,KAAK,IAAI;IACrE;IACA,IAAI,CAACtC,MAAM,CAACK,OAAO,CAACuC,MAAM,CAACpE,KAAK,CAAC,EAAE;MACjC;IACF;IACA,MAAM+D,MAAM,GAAGvC,MAAM,CAACK,OAAO,CAACC,aAAa,CAAC9B,KAAK,EAAElC,KAAK,IAAI,EAAE,CAAC;IAC/D0D,MAAM,CAACK,OAAO,CAACmC,YAAY,CAACH,SAAS,EAAEE,MAAM,EAAED,KAAK,CAAC;IACrD,IAAIK,WAAW,EAAE;MACfA,WAAW,CAACL,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,CAACtC,MAAM,EAAE1D,KAAK,EAAEkC,KAAK,CAAC,CAAC;EAC1B,MAAMqE,gBAAgB,GAAGpC,WAAW,CAACjC,KAAK,CAAC,GAAGlC,KAAK,CAAC,IAAI,KAAK;EAC7D,MAAMwG,OAAO,GAAGpC,YAAY,CAAClC,KAAK,CAAC,GAAGlC,KAAK,CAAC,IAAI,CAAC;EACjD,MAAMuC,KAAK,GAAG9E,KAAK,CAACgJ,OAAO,CAAC,MAAM;IAChC,IAAI9D,YAAY,EAAE;MAChB,OAAO;QACL+D,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,CAAC;QACVtE,KAAK,EAAE,CAAC;QACRuE,MAAM,EAAE;MACV,CAAC;IACH;IACA,MAAMC,SAAS,GAAGxJ,QAAQ,CAAC;MACzB,SAAS,EAAE,GAAGgF,KAAK;IACrB,CAAC,EAAEG,SAAS,CAAC;IACb,MAAMsE,YAAY,GAAGxF,cAAc,KAAK/B,cAAc,CAACE,IAAI;IAC3D,MAAMsH,aAAa,GAAGzF,cAAc,KAAK/B,cAAc,CAACG,KAAK;IAC7D,IAAIoH,YAAY,IAAIC,aAAa,EAAE;MACjC,IAAIC,IAAI,GAAGF,YAAY,GAAG,MAAM,GAAG,OAAO;MAC1C,IAAIlD,KAAK,EAAE;QACToD,IAAI,GAAGF,YAAY,GAAG,OAAO,GAAG,MAAM;MACxC;MACAD,SAAS,CAACG,IAAI,CAAC,GAAGpE,YAAY;IAChC;IACA,IAAI4D,OAAO,GAAG,CAAC,EAAE;MACfK,SAAS,CAACI,MAAM,GAAG,wBAAwBT,OAAO,GAAG;MACrDK,SAAS,CAACK,MAAM,GAAG,CAAC;IACtB;IACA,OAAOL,SAAS;EAClB,CAAC,EAAE,CAACxE,KAAK,EAAEM,YAAY,EAAEH,SAAS,EAAEI,YAAY,EAAEtB,cAAc,EAAEsC,KAAK,EAAE4C,OAAO,CAAC,CAAC;EAClF/I,KAAK,CAAC0J,SAAS,CAAC,MAAM;IACpB,IAAI,CAACxG,QAAQ,IAAIF,QAAQ,KAAKhC,aAAa,CAAC2I,IAAI,EAAE;MAChD;IACF;IACA,MAAMC,GAAG,GAAGpJ,aAAa,CAACyF,MAAM,CAACK,OAAO,CAACuD,cAAc,CAACvD,OAAO,CAAC;IAChE,IAAIuB,OAAO,CAACvB,OAAO,IAAI,CAACuB,OAAO,CAACvB,OAAO,CAACwD,QAAQ,CAACF,GAAG,CAACG,aAAa,CAAC,EAAE;MACnE,MAAMC,gBAAgB,GAAGnC,OAAO,CAACvB,OAAO,CAAC2D,aAAa,CAAC,gBAAgB,CAAC;MACxE,MAAMC,cAAc,GAAGlC,eAAe,CAAC1B,OAAO,IAAI0D,gBAAgB,IAAInC,OAAO,CAACvB,OAAO;MACrF,IAAIzF,wBAAwB,CAAC,CAAC,EAAE;QAC9BqJ,cAAc,CAACC,KAAK,CAAC;UACnBC,aAAa,EAAE;QACjB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAMC,cAAc,GAAGpE,MAAM,CAACK,OAAO,CAACgE,iBAAiB,CAAC,CAAC;QACzDJ,cAAc,CAACC,KAAK,CAAC,CAAC;QACtBlE,MAAM,CAACK,OAAO,CAACiE,MAAM,CAACF,cAAc,CAAC;MACvC;IACF;EACF,CAAC,EAAE,CAACnH,QAAQ,EAAEF,QAAQ,EAAEiD,MAAM,CAAC,CAAC;EAChC,IAAI6C,gBAAgB,EAAE;IACpB,OAAO,aAAajH,IAAI,CAAC,KAAK,EAAE;MAC9B,eAAe,EAAE8C,QAAQ;MACzB6F,IAAI,EAAE,cAAc;MACpB1F,KAAK,EAAElF,QAAQ,CAAC;QACdgF,KAAK,EAAE;MACT,CAAC,EAAEE,KAAK;IACV,CAAC,CAAC;EACJ;EACA,IAAIsB,UAAU,KAAK/D,iBAAiB,EAAE;IACpC,OAAO,IAAI;EACb;EACA,IAAIoI,WAAW,GAAGzE,KAAK,CAAC0E,OAAO;EAC/B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,IAAI3E,SAAS,CAAC4E,oBAAoB,EAAEC,2BAA2B,EAAE;IAClGN,WAAW,GAAGlC,KAAK,IAAI;MACrB,MAAMyC,WAAW,GAAG3J,qBAAqB,CAAC4E,MAAM,CAAC;MACjD,IAAI+E,WAAW,EAAE1I,EAAE,KAAKmC,KAAK,IAAIuG,WAAW,CAACzI,KAAK,KAAKA,KAAK,EAAE;QAC5D,IAAI,OAAOyD,KAAK,CAAC0E,OAAO,KAAK,UAAU,EAAE;UACvC1E,KAAK,CAAC0E,OAAO,CAACnC,KAAK,CAAC;QACtB;QACA;MACF;MACA,IAAI,CAACpE,UAAU,EAAE;QACf8G,OAAO,CAACC,IAAI,CAAC,CAAC,2BAA2BzG,KAAK,cAAclC,KAAK,kBAAkB,EAAE,qDAAqDyI,WAAW,EAAE1I,EAAE,WAAW0I,WAAW,EAAEzI,KAAK,GAAG,EAAE,kGAAkG,EAAE,yFAAyF,CAAC,CAACgF,IAAI,CAAC,IAAI,CAAC,CAAC;QACrYpD,UAAU,GAAG,IAAI;MACnB;IACF,CAAC;EACH;EACA,IAAIgH,QAAQ;EACZ,IAAIC,KAAK;EACT,IAAI1G,aAAa,KAAK,IAAI,IAAIF,MAAM,CAAC6G,UAAU,EAAE;IAC/CF,QAAQ,GAAG3G,MAAM,CAAC6G,UAAU,CAACjF,UAAU,CAAC;EAC1C;EACA,IAAI1B,aAAa,KAAK,IAAI,IAAIF,MAAM,CAAC8G,cAAc,EAAE;IACnD,MAAMC,UAAU,GAAGtF,MAAM,CAACK,OAAO,CAACkF,uBAAuB,CAAC/G,KAAK,EAAED,MAAM,CAACjC,KAAK,CAAC;;IAE9E;IACA,MAAMkJ,iBAAiB,GAAG5L,6BAA6B,CAAC6E,aAAa,EAAE3E,UAAU,CAAC;IAClF,MAAMsD,cAAc,GAAGmB,MAAM,CAACkH,cAAc,GAAGlH,MAAM,CAACkH,cAAc,CAAChH,aAAa,CAACtB,KAAK,EAAEmI,UAAU,EAAE/G,MAAM,EAAEyB,MAAM,CAAC,GAAGG,UAAU,CAAC/C,cAAc;IACjJ,MAAMmF,MAAM,GAAG5I,QAAQ,CAAC,CAAC,CAAC,EAAEwG,UAAU,EAAE;MACtC5D,GAAG,EAAE+I,UAAU;MACflI;IACF,CAAC,EAAEoI,iBAAiB,CAAC;IACrBN,QAAQ,GAAG3G,MAAM,CAAC8G,cAAc,CAAC9C,MAAM,CAAC;IACxChB,UAAU,CAACE,IAAI,CAAC3G,WAAW,CAAC,eAAe,CAAC,CAAC;IAC7CyG,UAAU,CAACE,IAAI,CAACR,WAAW,GAAG,eAAe,CAAC,CAAC;EACjD;EACA,IAAIiE,QAAQ,KAAKhJ,SAAS,EAAE;IAC1B,MAAMwJ,WAAW,GAAG/D,aAAa,EAAEgE,QAAQ,CAAC,CAAC;IAC7CT,QAAQ,GAAGQ,WAAW;IACtBP,KAAK,GAAGO,WAAW;EACrB;EACA,IAAI,aAAa3L,KAAK,CAAC6L,cAAc,CAACV,QAAQ,CAAC,IAAIvE,iBAAiB,EAAE;IACpEuE,QAAQ,GAAG,aAAanL,KAAK,CAAC8L,YAAY,CAACX,QAAQ,EAAE;MACnDnD;IACF,CAAC,CAAC;EACJ;EACA,MAAM+D,sBAAsB,GAAG9G,iBAAiB,GAAG,IAAI,GAAG;IACxDa,WAAW,EAAE6C,OAAO,CAAC,eAAe,EAAE7C,WAAW,CAAC;IAClDC,UAAU,EAAE4C,OAAO,CAAC,cAAc,EAAE5C,UAAU;EAChD,CAAC;EACD,OAAO,aAAalE,IAAI,CAAC,KAAK,EAAEjC,QAAQ,CAAC;IACvC2E,GAAG,EAAEwD,SAAS;IACdlD,SAAS,EAAE3E,IAAI,CAAC8D,OAAO,CAACE,IAAI,EAAEsD,UAAU,EAAE3C,SAAS,CAAC;IACpD2F,IAAI,EAAE,UAAU;IAChB,YAAY,EAAEjI,KAAK;IACnB,eAAe,EAAEoC,QAAQ;IACzB,eAAe,EAAEA,QAAQ,GAAG,CAAC;IAC7B,cAAc,EAAEK,OAAO;IACvB,cAAc,EAAE+D,OAAO;IACvBjE,KAAK,EAAEA,KAAK;IACZsG,KAAK,EAAEA,KAAK;IACZjI,QAAQ,EAAEA,QAAQ;IAClBoC,OAAO,EAAEoD,OAAO,CAAC,WAAW,EAAEpD,OAAO,CAAC;IACtCC,aAAa,EAAEmD,OAAO,CAAC,iBAAiB,EAAEnD,aAAa,CAAC;IACxDG,WAAW,EAAEgD,OAAO,CAAC,eAAe,EAAEhD,WAAW,CAAC;IAClDF,WAAW,EAAEiD,gBAAgB,CAAC,eAAe,CAAC;IAC9ChD,SAAS,EAAE0C,cAAc,CAAC,aAAa,CAAC;IACxCxC,SAAS,EAAE+C,OAAO,CAAC,aAAa,EAAE/C,SAAS,CAAC;IAC5CC,OAAO,EAAE8C,OAAO,CAAC,WAAW,EAAE9C,OAAO;EACvC,CAAC,EAAEkG,sBAAsB,EAAE/F,KAAK,EAAE;IAChC0E,OAAO,EAAED,WAAW;IACpBU,QAAQ,EAAEA;EACZ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACFR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGzG,QAAQ,CAAC4H,SAAS,GAAG;EAC3D;EACA;EACA;EACA;EACAtI,KAAK,EAAEzD,SAAS,CAACgM,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAACC,UAAU;EAC9DrH,SAAS,EAAE5E,SAAS,CAACkM,MAAM;EAC3BxH,QAAQ,EAAE1E,SAAS,CAACmM,MAAM,CAACF,UAAU;EACrClH,OAAO,EAAE/E,SAAS,CAACmM,MAAM;EACzB5H,MAAM,EAAEvE,SAAS,CAACoM,MAAM,CAACH,UAAU;EACnCjH,iBAAiB,EAAEhF,SAAS,CAACqM,IAAI;EACjC5H,aAAa,EAAEzE,SAAS,CAACsM,KAAK,CAAC;IAC7BC,YAAY,EAAEvM,SAAS,CAACgM,KAAK,CAAC,CAAC,2BAA2B,EAAE,kBAAkB,CAAC,CAAC;IAChFQ,iBAAiB,EAAExM,SAAS,CAACqM,IAAI;IACjCI,YAAY,EAAEzM,SAAS,CAACqM,IAAI;IAC5BlJ,KAAK,EAAEnD,SAAS,CAAC0M;EACnB,CAAC,CAAC;EACFrH,aAAa,EAAErF,SAAS,CAACqM,IAAI,CAACJ,UAAU;EACxChH,YAAY,EAAEjF,SAAS,CAACqM,IAAI,CAACJ,UAAU;EACvC3G,OAAO,EAAEtF,SAAS,CAAC2M,IAAI;EACvBpH,aAAa,EAAEvF,SAAS,CAAC2M,IAAI;EAC7B9G,WAAW,EAAE7F,SAAS,CAAC2M,IAAI;EAC3B7G,UAAU,EAAE9F,SAAS,CAAC2M,IAAI;EAC1BhH,SAAS,EAAE3F,SAAS,CAAC2M,IAAI;EACzBnH,WAAW,EAAExF,SAAS,CAAC2M,IAAI;EAC3BlH,SAAS,EAAEzF,SAAS,CAAC2M,IAAI;EACzBzH,YAAY,EAAElF,SAAS,CAACmM,MAAM,CAACF,UAAU;EACzCrI,cAAc,EAAE5D,SAAS,CAACgM,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,UAAU;EACxDzH,KAAK,EAAExE,SAAS,CAAC4M,SAAS,CAAC,CAAC5M,SAAS,CAACmM,MAAM,EAAEnM,SAAS,CAACkM,MAAM,CAAC,CAAC,CAACD,UAAU;EAC3E9G,YAAY,EAAEnF,SAAS,CAACmM,MAAM,CAACF,UAAU;EACzC7G,aAAa,EAAEpF,SAAS,CAACmM,MAAM,CAACF,UAAU;EAC1CtH,KAAK,EAAE3E,SAAS,CAACmM,MAAM,CAACF;AAC1B,CAAC,GAAG,KAAK,CAAC;AACV,MAAMY,gBAAgB,GAAGnM,QAAQ,CAACyD,QAAQ,CAAC;AAC3C,SAAS0I,gBAAgB,IAAI1I,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}