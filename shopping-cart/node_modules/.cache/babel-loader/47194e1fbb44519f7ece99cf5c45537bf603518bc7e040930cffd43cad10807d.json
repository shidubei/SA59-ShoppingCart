{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { exportAs } from \"../../../utils/exportAs.js\";\nimport { buildCSV } from \"./serializers/csvSerializer.js\";\nimport { getColumnsToExport, defaultGetRowsToExport } from \"./utils.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { GridCsvExportMenuItem } from \"../../../components/toolbar/GridToolbarExport.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","props","logger","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","options","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","csvOptions","delimiter","shouldAppendQuotes","includeHeaders","includeColumnGroupsHeaders","escapeFormulas","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","disableToolbarButton","component","componentName"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { exportAs } from \"../../../utils/exportAs.js\";\nimport { buildCSV } from \"./serializers/csvSerializer.js\";\nimport { getColumnsToExport, defaultGetRowsToExport } from \"./utils.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { GridCsvExportMenuItem } from \"../../../components/toolbar/GridToolbarExport.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}