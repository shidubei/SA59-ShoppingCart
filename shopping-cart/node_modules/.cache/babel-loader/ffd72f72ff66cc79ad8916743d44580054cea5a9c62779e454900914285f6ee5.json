{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot } from \"../components/index.js\";\nimport { useGridAriaAttributes } from \"../hooks/utils/useGridAriaAttributes.js\";\nimport { useGridRowAriaAttributes } from \"../hooks/features/rows/useGridRowAriaAttributes.js\";\nimport { GridContextProvider } from \"../context/GridContextProvider.js\";\nimport { useDataGridComponent } from \"./useDataGridComponent.js\";\nimport { useDataGridProps } from \"./useDataGridProps.js\";\nimport { propValidatorsDataGrid, validateProps } from \"../internals/utils/propValidation.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst configuration = {\n  hooks: {\n    useGridAriaAttributes,\n    useGridRowAriaAttributes\n  }\n};\nlet propValidators;\nif (process.env.NODE_ENV !== 'production') {\n  propValidators = [...propValidatorsDataGrid,\n  // Only validate in MIT version\n  props => props.columns && props.columns.some(column => column.resizable) && [`MUI X: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n') || undefined];\n}\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const privateApiRef = useDataGridComponent(props.apiRef, props);\n  if (process.env.NODE_ENV !== 'production') {\n    validateProps(props, propValidators);\n  }\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    configuration: configuration,\n    props: props,\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref\n    }, props.forwardedProps, {\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {}), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n    }))\n  });\n});\n/**\n * Demos:\n * - [DataGrid](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGrid API](https://mui.com/x/api/data-grid/data-grid/)\n */\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n  /**\n   * The label of the Data Grid.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * The id of the element containing a label for the Data Grid.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.\n   * @default false\n   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container\n   * @example\n   * <div style={{ display: 'flex', flexDirection: 'column' }}>\n   *   <DataGrid />\n   * </div>\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n  /**\n   * If `true`, columns are autosized after the datagrid is mounted.\n   * @default false\n   */\n  autosizeOnMount: PropTypes.bool,\n  /**\n   * The options for autosize when user-initiated.\n   */\n  autosizeOptions: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string),\n    expand: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    includeOutliers: PropTypes.bool,\n    outliersFactor: PropTypes.number\n  }),\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n  /**\n   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The character used to separate cell values when copying to the clipboard.\n   * @default '\\t'\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n  /**\n   * Column region in pixels to render before/after the viewport\n   * @default 150\n   */\n  columnBufferPx: PropTypes.number,\n  /**\n   * Sets the height in pixels of the column group headers in the Data Grid.\n   * Inherits the `columnHeaderHeight` value if not set.\n   */\n  columnGroupHeaderHeight: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Sets the height in pixel of the column headers in the Data Grid.\n   * @default 56\n   */\n  columnHeaderHeight: PropTypes.number,\n  /**\n   * Set of columns of type [[GridColDef]][].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * Set the column visibility model of the Data Grid.\n   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\n   * Set the density of the Data Grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\n   * If `true`, column autosizing on header separator double-click is disabled.\n   * @default false\n   */\n  disableAutosize: PropTypes.bool,\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\n   * If `true`, the column sorting feature will be disabled.\n   * @default false\n   */\n  disableColumnSorting: PropTypes.bool,\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\n   * If `true`, `eval()` is not used for performance optimization.\n   * @default false\n   */\n  disableEval: PropTypes.bool,\n  /**\n   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.\n   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.\n   * @default false (`!props.checkboxSelection` for MIT Data Grid)\n   */\n  disableMultipleRowSelection: PropTypes.bool,\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\n   * Use if the actual rowCount is not known upfront, but an estimation is available.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Applicable only with `paginationMode=\"server\"` and when `rowCount=\"-1\"`\n   */\n  estimatedRowCount: PropTypes.number,\n  /**\n   * Unstable features, breaking changes might be introduced.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\n   * @default 150\n   */\n  filterDebounceMs: PropTypes.number,\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Set the filter model of the Data Grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\n   * Forwarded props for the Data Grid root element.\n   * @ignore - do not document.\n   */\n  forwardedProps: PropTypes.object,\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {React.JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n   * @default false\n   */\n  ignoreDiacritics: PropTypes.bool,\n  /**\n   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n   * @default false\n   */\n  ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool]),\n  /**\n   * If `select`, a group header checkbox in indeterminate state (like \"Select All\" checkbox)\n   * will select all the rows under it.\n   * If `deselect`, it will deselect all the rows under it.\n   * Works only if `checkboxSelection` is enabled.\n   * @default \"deselect\"\n   */\n  indeterminateCheckboxAction: PropTypes.oneOf(['deselect', 'select']),\n  /**\n   * The initial state of the DataGrid.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the row is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\n   * If `true`, a loading overlay is displayed.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Set the locale text of the Data Grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\n   * Callback called when the data is copied to the clipboard.\n   * @param {string} data The data copied to the clipboard.\n   */\n  onClipboardCopy: PropTypes.func,\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n  /**\n   * Callback fired when the density changes.\n   * @param {GridDensity} density New density value.\n   */\n  onDensityChange: PropTypes.func,\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n  /**\n   * Callback fired when the pagination meta has changed.\n   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.\n   */\n  onPaginationMetaChange: PropTypes.func,\n  /**\n   * Callback fired when the pagination model has changed.\n   * @param {GridPaginationModel} model Updated pagination model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPaginationModelChange: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\n   * Callback fired when the Data Grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n  /**\n   * Callback fired when the row count has changed.\n   * @param {number} count Updated row count.\n   */\n  onRowCountChange: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowSelectionModelChange: PropTypes.func,\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Data Grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  pagination: PropTypes.oneOf([true]),\n  /**\n   * The extra information about the pagination state of the Data Grid.\n   * Only applicable with `paginationMode=\"server\"`.\n   */\n  paginationMeta: PropTypes.shape({\n    hasNextPage: PropTypes.bool\n  }),\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n  /**\n   * The milliseconds throttle delay for resizing the grid.\n   * @default 60\n   */\n  resizeThrottleMs: PropTypes.number,\n  /**\n   * Row region in pixels to render before/after the viewport\n   * @default 150\n   */\n  rowBufferPx: PropTypes.number,\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Only works with `paginationMode=\"server\"`, ignored when `paginationMode=\"client\"`.\n   */\n  rowCount: PropTypes.number,\n  /**\n   * Sets the height in pixel of a row in the Data Grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n  /**\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n   * Setting it to a lower value could be useful when using dynamic row height,\n   * but might reduce performance when displaying a large number of rows.\n   * @default 166\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   * @default []\n   */\n  rows: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `false`, the row selection mode is disabled.\n   * @default true\n   */\n  rowSelection: PropTypes.bool,\n  /**\n   * Sets the row selection model of the Data Grid.\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\n   * Override the height/width of the Data Grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n  /**\n   * If `true`, vertical borders will be displayed between cells.\n   * @default false\n   */\n  showCellVerticalBorder: PropTypes.bool,\n  /**\n   * If `true`, vertical borders will be displayed between column header items.\n   * @default false\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable components.\n   */\n  slots: PropTypes.object,\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\n   * Set the sort model of the Data Grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If `true`, the Data Grid will auto span the cells over the rows having the same value.\n   * @default false\n   */\n  unstable_rowSpanning: PropTypes.bool\n};","map":{"version":3,"names":["_extends","React","PropTypes","GridBody","GridFooterPlaceholder","GridHeader","GridRoot","useGridAriaAttributes","useGridRowAriaAttributes","GridContextProvider","useDataGridComponent","useDataGridProps","propValidatorsDataGrid","validateProps","jsx","_jsx","jsxs","_jsxs","configuration","hooks","propValidators","process","env","NODE_ENV","props","columns","some","column","resizable","join","undefined","DataGridRaw","forwardRef","DataGrid","inProps","ref","privateApiRef","apiRef","children","className","style","sx","forwardedProps","memo","propTypes","shape","current","object","isRequired","string","autoHeight","bool","autoPageSize","autosizeOnMount","autosizeOptions","arrayOf","expand","includeHeaders","includeOutliers","outliersFactor","number","cellModesModel","checkboxSelection","classes","clipboardCopyCellDelimiter","columnBufferPx","columnGroupHeaderHeight","columnGroupingModel","columnHeaderHeight","columnVisibilityModel","density","oneOf","disableAutosize","disableColumnFilter","disableColumnMenu","disableColumnResize","disableColumnSelector","disableColumnSorting","disableDensitySelector","disableEval","disableMultipleRowSelection","disableRowSelectionOnClick","disableVirtualization","editMode","estimatedRowCount","experimentalFeatures","warnIfFocusStateIsNotSynced","filterDebounceMs","filterMode","filterModel","items","field","id","oneOfType","operator","value","any","logicOperator","quickFilterExcludeHiddenColumns","quickFilterLogicOperator","quickFilterValues","array","getCellClassName","func","getDetailPanelContent","getEstimatedRowHeight","getRowClassName","getRowHeight","getRowId","getRowSpacing","hideFooter","hideFooterPagination","hideFooterSelectedRowCount","ignoreDiacritics","ignoreValueFormatterDuringExport","clipboardExport","csvExport","indeterminateCheckboxAction","initialState","isCellEditable","isRowSelectable","keepNonExistentRowsSelected","loading","localeText","logger","debug","error","info","warn","logLevel","nonce","onCellClick","onCellDoubleClick","onCellEditStart","onCellEditStop","onCellKeyDown","onCellModesModelChange","onClipboardCopy","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnResize","onColumnVisibilityModelChange","onColumnWidthChange","onDensityChange","onFilterModelChange","onMenuClose","onMenuOpen","onPaginationMetaChange","onPaginationModelChange","onPreferencePanelClose","onPreferencePanelOpen","onProcessRowUpdateError","onResize","onRowClick","onRowCountChange","onRowDoubleClick","onRowEditStart","onRowEditStop","onRowModesModelChange","onRowSelectionModelChange","onSortModelChange","onStateChange","pageSizeOptions","label","pagination","paginationMeta","hasNextPage","paginationMode","paginationModel","page","pageSize","processRowUpdate","resizeThrottleMs","rowBufferPx","rowCount","rowHeight","rowModesModel","rowPositionsDebounceMs","rows","rowSelection","rowSelectionModel","rowSpacingType","scrollbarSize","showCellVerticalBorder","showColumnVerticalBorder","slotProps","slots","sortingMode","sortingOrder","sortModel","sort","unstable_rowSpanning"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/DataGrid/DataGrid.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot } from \"../components/index.js\";\nimport { useGridAriaAttributes } from \"../hooks/utils/useGridAriaAttributes.js\";\nimport { useGridRowAriaAttributes } from \"../hooks/features/rows/useGridRowAriaAttributes.js\";\nimport { GridContextProvider } from \"../context/GridContextProvider.js\";\nimport { useDataGridComponent } from \"./useDataGridComponent.js\";\nimport { useDataGridProps } from \"./useDataGridProps.js\";\nimport { propValidatorsDataGrid, validateProps } from \"../internals/utils/propValidation.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst configuration = {\n  hooks: {\n    useGridAriaAttributes,\n    useGridRowAriaAttributes\n  }\n};\nlet propValidators;\nif (process.env.NODE_ENV !== 'production') {\n  propValidators = [...propValidatorsDataGrid,\n  // Only validate in MIT version\n  props => props.columns && props.columns.some(column => column.resizable) && [`MUI X: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n') || undefined];\n}\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const privateApiRef = useDataGridComponent(props.apiRef, props);\n  if (process.env.NODE_ENV !== 'production') {\n    validateProps(props, propValidators);\n  }\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    configuration: configuration,\n    props: props,\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref\n    }, props.forwardedProps, {\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {}), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n    }))\n  });\n});\n/**\n * Demos:\n * - [DataGrid](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGrid API](https://mui.com/x/api/data-grid/data-grid/)\n */\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n  /**\n   * The label of the Data Grid.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * The id of the element containing a label for the Data Grid.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.\n   * @default false\n   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container\n   * @example\n   * <div style={{ display: 'flex', flexDirection: 'column' }}>\n   *   <DataGrid />\n   * </div>\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n  /**\n   * If `true`, columns are autosized after the datagrid is mounted.\n   * @default false\n   */\n  autosizeOnMount: PropTypes.bool,\n  /**\n   * The options for autosize when user-initiated.\n   */\n  autosizeOptions: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string),\n    expand: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    includeOutliers: PropTypes.bool,\n    outliersFactor: PropTypes.number\n  }),\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n  /**\n   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The character used to separate cell values when copying to the clipboard.\n   * @default '\\t'\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n  /**\n   * Column region in pixels to render before/after the viewport\n   * @default 150\n   */\n  columnBufferPx: PropTypes.number,\n  /**\n   * Sets the height in pixels of the column group headers in the Data Grid.\n   * Inherits the `columnHeaderHeight` value if not set.\n   */\n  columnGroupHeaderHeight: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Sets the height in pixel of the column headers in the Data Grid.\n   * @default 56\n   */\n  columnHeaderHeight: PropTypes.number,\n  /**\n   * Set of columns of type [[GridColDef]][].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * Set the column visibility model of the Data Grid.\n   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\n   * Set the density of the Data Grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\n   * If `true`, column autosizing on header separator double-click is disabled.\n   * @default false\n   */\n  disableAutosize: PropTypes.bool,\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\n   * If `true`, the column sorting feature will be disabled.\n   * @default false\n   */\n  disableColumnSorting: PropTypes.bool,\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\n   * If `true`, `eval()` is not used for performance optimization.\n   * @default false\n   */\n  disableEval: PropTypes.bool,\n  /**\n   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.\n   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.\n   * @default false (`!props.checkboxSelection` for MIT Data Grid)\n   */\n  disableMultipleRowSelection: PropTypes.bool,\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\n   * Use if the actual rowCount is not known upfront, but an estimation is available.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Applicable only with `paginationMode=\"server\"` and when `rowCount=\"-1\"`\n   */\n  estimatedRowCount: PropTypes.number,\n  /**\n   * Unstable features, breaking changes might be introduced.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\n   * @default 150\n   */\n  filterDebounceMs: PropTypes.number,\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Set the filter model of the Data Grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\n   * Forwarded props for the Data Grid root element.\n   * @ignore - do not document.\n   */\n  forwardedProps: PropTypes.object,\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {React.JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n   * @default false\n   */\n  ignoreDiacritics: PropTypes.bool,\n  /**\n   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n   * @default false\n   */\n  ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool]),\n  /**\n   * If `select`, a group header checkbox in indeterminate state (like \"Select All\" checkbox)\n   * will select all the rows under it.\n   * If `deselect`, it will deselect all the rows under it.\n   * Works only if `checkboxSelection` is enabled.\n   * @default \"deselect\"\n   */\n  indeterminateCheckboxAction: PropTypes.oneOf(['deselect', 'select']),\n  /**\n   * The initial state of the DataGrid.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the row is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\n   * If `true`, a loading overlay is displayed.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Set the locale text of the Data Grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\n   * Callback called when the data is copied to the clipboard.\n   * @param {string} data The data copied to the clipboard.\n   */\n  onClipboardCopy: PropTypes.func,\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n  /**\n   * Callback fired when the density changes.\n   * @param {GridDensity} density New density value.\n   */\n  onDensityChange: PropTypes.func,\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n  /**\n   * Callback fired when the pagination meta has changed.\n   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.\n   */\n  onPaginationMetaChange: PropTypes.func,\n  /**\n   * Callback fired when the pagination model has changed.\n   * @param {GridPaginationModel} model Updated pagination model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPaginationModelChange: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\n   * Callback fired when the Data Grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n  /**\n   * Callback fired when the row count has changed.\n   * @param {number} count Updated row count.\n   */\n  onRowCountChange: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowSelectionModelChange: PropTypes.func,\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Data Grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  pagination: PropTypes.oneOf([true]),\n  /**\n   * The extra information about the pagination state of the Data Grid.\n   * Only applicable with `paginationMode=\"server\"`.\n   */\n  paginationMeta: PropTypes.shape({\n    hasNextPage: PropTypes.bool\n  }),\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n  /**\n   * The milliseconds throttle delay for resizing the grid.\n   * @default 60\n   */\n  resizeThrottleMs: PropTypes.number,\n  /**\n   * Row region in pixels to render before/after the viewport\n   * @default 150\n   */\n  rowBufferPx: PropTypes.number,\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Only works with `paginationMode=\"server\"`, ignored when `paginationMode=\"client\"`.\n   */\n  rowCount: PropTypes.number,\n  /**\n   * Sets the height in pixel of a row in the Data Grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n  /**\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n   * Setting it to a lower value could be useful when using dynamic row height,\n   * but might reduce performance when displaying a large number of rows.\n   * @default 166\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   * @default []\n   */\n  rows: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `false`, the row selection mode is disabled.\n   * @default true\n   */\n  rowSelection: PropTypes.bool,\n  /**\n   * Sets the row selection model of the Data Grid.\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\n   * Override the height/width of the Data Grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n  /**\n   * If `true`, vertical borders will be displayed between cells.\n   * @default false\n   */\n  showCellVerticalBorder: PropTypes.bool,\n  /**\n   * If `true`, vertical borders will be displayed between column header items.\n   * @default false\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable components.\n   */\n  slots: PropTypes.object,\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\n   * Set the sort model of the Data Grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If `true`, the Data Grid will auto span the cells over the rows having the same value.\n   * @default false\n   */\n  unstable_rowSpanning: PropTypes.bool\n};"],"mappings":"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AI;EAC/B;AACF;AACA;AACA;AACA;AACA;EACEmC,mBAAmB,EAAExI,SAAS,CAACqG,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEoC,yBAAyB,EAAEzI,SAAS,CAACqG,IAAI;EACzC;AACF;AACA;AACA;AACA;AACA;EACEqC,mBAAmB,EAAE1I,SAAS,CAACqG,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEsC,mBAAmB,EAAE3I,SAAS,CAACqG,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEuC,iBAAiB,EAAE5I,SAAS,CAACqG,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;EACEwC,kBAAkB,EAAE7I,SAAS,CAACqG,IAAI;EAClC;AACF;AACA;AACA;AACA;AACA;EACEyC,mBAAmB,EAAE9I,SAAS,CAACqG,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACE0C,cAAc,EAAE/I,SAAS,CAACqG,IAAI;EAC9B;AACF;AACA;AACA;AACA;EACE2C,6BAA6B,EAAEhJ,SAAS,CAACqG,IAAI;EAC7C;AACF;AACA;AACA;AACA;AACA;EACE4C,mBAAmB,EAAEjJ,SAAS,CAACqG,IAAI;EACnC;AACF;AACA;AACA;EACE6C,eAAe,EAAElJ,SAAS,CAACqG,IAAI;EAC/B;AACF;AACA;AACA;AACA;EACE8C,mBAAmB,EAAEnJ,SAAS,CAACqG,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACE+C,WAAW,EAAEpJ,SAAS,CAACqG,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACEgD,UAAU,EAAErJ,SAAS,CAACqG,IAAI;EAC1B;AACF;AACA;AACA;EACEiD,sBAAsB,EAAEtJ,SAAS,CAACqG,IAAI;EACtC;AACF;AACA;AACA;AACA;EACEkD,uBAAuB,EAAEvJ,SAAS,CAACqG,IAAI;EACvC;AACF;AACA;AACA;AACA;AACA;EACEmD,sBAAsB,EAAExJ,SAAS,CAACqG,IAAI;EACtC;AACF;AACA;AACA;AACA;AACA;EACEoD,qBAAqB,EAAEzJ,SAAS,CAACqG,IAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}