{"ast":null,"code":"import { createSelector, createSelectorMemoized } from \"../../../utils/createSelector.js\";\nimport { gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from \"../filter/gridFilterSelector.js\";\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { getPageCount } from \"./gridPaginationUtils.js\";\n\n/**\n * @category Pagination\n * @ignore - do not document.\n */\nexport const gridPaginationSelector = state => state.pagination;\n\n/**\n * Get the pagination model\n * @category Pagination\n */\nexport const gridPaginationModelSelector = createSelector(gridPaginationSelector, pagination => pagination.paginationModel);\n\n/**\n * Get the row count\n * @category Pagination\n */\nexport const gridPaginationRowCountSelector = createSelector(gridPaginationSelector, pagination => pagination.rowCount);\n\n/**\n * Get the pagination meta\n * @category Pagination\n */\nexport const gridPaginationMetaSelector = createSelector(gridPaginationSelector, pagination => pagination.meta);\n\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.page);\n\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSizeSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.pageSize);\n\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageCountSelector = createSelector(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount) => getPageCount(rowCount, paginationModel.pageSize, paginationModel.page));\n\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);\n\n  // The range contains no element\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  }\n\n  // The tree is flat, there is no need to look for children\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id]?.depth;\n    if (depth === undefined) {\n      lastRowIndex += 1;\n    } else {\n      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n        lastRowIndex += 1;\n      }\n      if (depth === 0) {\n        topLevelRowAdded += 1;\n      }\n    }\n  }\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridExpandedSortedRowEntriesSelector","gridExpandedSortedRowIdsSelector","gridFilteredSortedTopLevelRowEntriesSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","getPageCount","gridPaginationSelector","state","pagination","gridPaginationModelSelector","paginationModel","gridPaginationRowCountSelector","rowCount","gridPaginationMetaSelector","meta","gridPageSelector","page","gridPageSizeSelector","pageSize","gridPageCountSelector","gridPaginationRowRangeSelector","rowTree","rowTreeDepth","visibleSortedRowEntries","visibleSortedTopLevelRowEntries","visibleTopLevelRowCount","length","topLevelFirstRowIndex","Math","min","topLevelLastRowIndex","firstRowIndex","lastRowIndex","topLevelFirstRow","topLevelRowsInCurrentPageCount","findIndex","row","id","topLevelRowAdded","depth","undefined","gridPaginatedVisibleSortedGridRowEntriesSelector","paginationRange","slice","gridPaginatedVisibleSortedGridRowIdsSelector","visibleSortedRowIds"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from \"../../../utils/createSelector.js\";\nimport { gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from \"../filter/gridFilterSelector.js\";\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { getPageCount } from \"./gridPaginationUtils.js\";\n\n/**\n * @category Pagination\n * @ignore - do not document.\n */\nexport const gridPaginationSelector = state => state.pagination;\n\n/**\n * Get the pagination model\n * @category Pagination\n */\nexport const gridPaginationModelSelector = createSelector(gridPaginationSelector, pagination => pagination.paginationModel);\n\n/**\n * Get the row count\n * @category Pagination\n */\nexport const gridPaginationRowCountSelector = createSelector(gridPaginationSelector, pagination => pagination.rowCount);\n\n/**\n * Get the pagination meta\n * @category Pagination\n */\nexport const gridPaginationMetaSelector = createSelector(gridPaginationSelector, pagination => pagination.meta);\n\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.page);\n\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageSizeSelector = createSelector(gridPaginationModelSelector, paginationModel => paginationModel.pageSize);\n\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\nexport const gridPageCountSelector = createSelector(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount) => getPageCount(rowCount, paginationModel.pageSize, paginationModel.page));\n\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);\n\n  // The range contains no element\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  }\n\n  // The tree is flat, there is no need to look for children\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id]?.depth;\n    if (depth === undefined) {\n      lastRowIndex += 1;\n    } else {\n      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n        lastRowIndex += 1;\n      }\n      if (depth === 0) {\n        topLevelRowAdded += 1;\n      }\n    }\n  }\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}