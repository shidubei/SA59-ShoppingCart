{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"aria-label\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from '@mui/system';\nimport { isOverflown } from \"../../utils/domUtils.js\";\nimport { getDataGridUtilityClass } from \"../../constants/gridClasses.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['columnHeaderTitle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst GridColumnHeaderTitleRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderTitle',\n  overridesResolver: (props, styles) => styles.columnHeaderTitle\n})({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  fontWeight: 'var(--unstable_DataGrid-headWeight)',\n  lineHeight: 'normal'\n});\nconst ColumnHeaderInnerTitle = /*#__PURE__*/React.forwardRef(function ColumnHeaderInnerTitle(props, ref) {\n  // Tooltip adds aria-label to the props, which is not needed since the children prop is a string\n  // See https://github.com/mui/mui-x/pull/14482\n  const {\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootProps = useGridRootProps();\n  const classes = useUtilityClasses(rootProps);\n  return /*#__PURE__*/_jsx(GridColumnHeaderTitleRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: rootProps\n  }, other));\n});\n// No React.memo here as if we display the sort icon, we need to recalculate the isOver\nfunction GridColumnHeaderTitle(props) {\n  const {\n    label,\n    description\n  } = props;\n  const rootProps = useGridRootProps();\n  const titleRef = React.useRef(null);\n  const [tooltip, setTooltip] = React.useState('');\n  const handleMouseOver = React.useCallback(() => {\n    if (!description && titleRef?.current) {\n      const isOver = isOverflown(titleRef.current);\n      if (isOver) {\n        setTooltip(label);\n      } else {\n        setTooltip('');\n      }\n    }\n  }, [description, label]);\n  return /*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n    title: description || tooltip\n  }, rootProps.slotProps?.baseTooltip, {\n    children: /*#__PURE__*/_jsx(ColumnHeaderInnerTitle, {\n      onMouseOver: handleMouseOver,\n      ref: titleRef,\n      children: label\n    })\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnWidth: PropTypes.number.isRequired,\n  description: PropTypes.node,\n  label: PropTypes.string.isRequired\n} : void 0;\nexport { GridColumnHeaderTitle };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","composeClasses","styled","isOverflown","getDataGridUtilityClass","useGridRootProps","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridColumnHeaderTitleRoot","name","slot","overridesResolver","props","styles","columnHeaderTitle","textOverflow","overflow","whiteSpace","fontWeight","lineHeight","ColumnHeaderInnerTitle","forwardRef","ref","className","other","rootProps","GridColumnHeaderTitle","label","description","titleRef","useRef","tooltip","setTooltip","useState","handleMouseOver","useCallback","current","isOver","baseTooltip","title","slotProps","children","onMouseOver","process","env","NODE_ENV","propTypes","columnWidth","number","isRequired","node","string"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"aria-label\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from '@mui/system';\nimport { isOverflown } from \"../../utils/domUtils.js\";\nimport { getDataGridUtilityClass } from \"../../constants/gridClasses.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['columnHeaderTitle']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst GridColumnHeaderTitleRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderTitle',\n  overridesResolver: (props, styles) => styles.columnHeaderTitle\n})({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  fontWeight: 'var(--unstable_DataGrid-headWeight)',\n  lineHeight: 'normal'\n});\nconst ColumnHeaderInnerTitle = /*#__PURE__*/React.forwardRef(function ColumnHeaderInnerTitle(props, ref) {\n  // Tooltip adds aria-label to the props, which is not needed since the children prop is a string\n  // See https://github.com/mui/mui-x/pull/14482\n  const {\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootProps = useGridRootProps();\n  const classes = useUtilityClasses(rootProps);\n  return /*#__PURE__*/_jsx(GridColumnHeaderTitleRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: rootProps\n  }, other));\n});\n// No React.memo here as if we display the sort icon, we need to recalculate the isOver\nfunction GridColumnHeaderTitle(props) {\n  const {\n    label,\n    description\n  } = props;\n  const rootProps = useGridRootProps();\n  const titleRef = React.useRef(null);\n  const [tooltip, setTooltip] = React.useState('');\n  const handleMouseOver = React.useCallback(() => {\n    if (!description && titleRef?.current) {\n      const isOver = isOverflown(titleRef.current);\n      if (isOver) {\n        setTooltip(label);\n      } else {\n        setTooltip('');\n      }\n    }\n  }, [description, label]);\n  return /*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n    title: description || tooltip\n  }, rootProps.slotProps?.baseTooltip, {\n    children: /*#__PURE__*/_jsx(ColumnHeaderInnerTitle, {\n      onMouseOver: handleMouseOver,\n      ref: titleRef,\n      children: label\n    })\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnWidth: PropTypes.number.isRequired,\n  description: PropTypes.node,\n  label: PropTypes.string.isRequired\n} : void 0;\nexport { GridColumnHeaderTitle };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}