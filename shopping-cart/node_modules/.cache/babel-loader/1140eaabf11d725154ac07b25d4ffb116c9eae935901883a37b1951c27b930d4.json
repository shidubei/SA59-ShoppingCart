{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"color\", \"error\", \"helperText\", \"size\", \"variant\"],\n  _excluded2 = [\"key\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { getValueOptions, isSingleSelectColDef } from \"./filterPanelUtils.js\";\nimport { useGridRootProps } from \"../../../hooks/utils/useGridRootProps.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst filter = createFilterOptions();\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n      item,\n      applyValue,\n      apiRef,\n      focusElementRef,\n      color,\n      error,\n      helperText,\n      size,\n      variant = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const TextFieldProps = {\n    color,\n    error,\n    helperText,\n    size,\n    variant\n  };\n  const id = useId();\n  const rootProps = useGridRootProps();\n  let resolvedColumn = null;\n  if (item.field) {\n    const column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  const getOptionValue = resolvedColumn?.getOptionValue;\n  const getOptionLabel = resolvedColumn?.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    renderTags: (value, getTagProps) => value.map((option, index) => {\n      const _getTagProps = getTagProps({\n          index\n        }),\n        {\n          key\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded2);\n      return /*#__PURE__*/_jsx(rootProps.slots.baseChip, _extends({\n        variant: \"outlined\",\n        size: \"small\",\n        label: getOptionLabel(option)\n      }, tagProps), key);\n    }),\n    renderInput: params => /*#__PURE__*/_jsx(rootProps.slots.baseTextField, _extends({}, params, {\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      InputLabelProps: _extends({}, params.InputLabelProps, {\n        shrink: true\n      }),\n      inputRef: focusElementRef,\n      type: \"singleSelect\"\n    }, TextFieldProps, rootProps.slotProps?.baseTextField))\n  }, other));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","Autocomplete","createFilterOptions","unstable_useId","useId","getValueOptions","isSingleSelectColDef","useGridRootProps","jsx","_jsx","filter","GridFilterInputMultipleSingleSelect","props","item","applyValue","apiRef","focusElementRef","color","error","helperText","size","variant","other","TextFieldProps","id","rootProps","resolvedColumn","field","column","current","getColumn","getOptionValue","getOptionLabel","isOptionEqualToValue","useCallback","option","value","resolvedValueOptions","useMemo","filteredValues","Array","isArray","reduce","acc","resolvedValue","find","v","push","handleChange","event","map","multiple","options","filterOptions","onChange","renderTags","getTagProps","index","_getTagProps","key","tagProps","slots","baseChip","label","renderInput","params","baseTextField","getLocaleText","placeholder","InputLabelProps","shrink","inputRef","type","slotProps","process","env","NODE_ENV","propTypes","shape","object","isRequired","func","oneOfType","string","number","operator","any","oneOf"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"color\", \"error\", \"helperText\", \"size\", \"variant\"],\n  _excluded2 = [\"key\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { getValueOptions, isSingleSelectColDef } from \"./filterPanelUtils.js\";\nimport { useGridRootProps } from \"../../../hooks/utils/useGridRootProps.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst filter = createFilterOptions();\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n      item,\n      applyValue,\n      apiRef,\n      focusElementRef,\n      color,\n      error,\n      helperText,\n      size,\n      variant = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const TextFieldProps = {\n    color,\n    error,\n    helperText,\n    size,\n    variant\n  };\n  const id = useId();\n  const rootProps = useGridRootProps();\n  let resolvedColumn = null;\n  if (item.field) {\n    const column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  const getOptionValue = resolvedColumn?.getOptionValue;\n  const getOptionLabel = resolvedColumn?.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    renderTags: (value, getTagProps) => value.map((option, index) => {\n      const _getTagProps = getTagProps({\n          index\n        }),\n        {\n          key\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded2);\n      return /*#__PURE__*/_jsx(rootProps.slots.baseChip, _extends({\n        variant: \"outlined\",\n        size: \"small\",\n        label: getOptionLabel(option)\n      }, tagProps), key);\n    }),\n    renderInput: params => /*#__PURE__*/_jsx(rootProps.slots.baseTextField, _extends({}, params, {\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      InputLabelProps: _extends({}, params.InputLabelProps, {\n        shrink: true\n      }),\n      inputRef: focusElementRef,\n      type: \"singleSelect\"\n    }, TextFieldProps, rootProps.slotProps?.baseTextField))\n  }, other));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}