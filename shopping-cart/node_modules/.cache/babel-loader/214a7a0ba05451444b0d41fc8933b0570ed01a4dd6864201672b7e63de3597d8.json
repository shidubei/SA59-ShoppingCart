{"ast":null,"code":"import { GridSignature } from \"../../utils/useGridApiEventHandler.js\";\nimport { GRID_ROOT_GROUP_ID } from \"../rows/gridRowsUtils.js\";\nimport { gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { gridSortedRowIdsSelector } from \"../sorting/gridSortingSelector.js\";\nimport { selectedIdsLookupSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { createSelector } from \"../../../utils/createSelector.js\";\nexport const ROW_SELECTION_PROPAGATION_DEFAULT = {\n  parents: false,\n  descendants: false\n};\nfunction getGridRowGroupSelectableDescendants(apiRef, groupId) {\n  const rowTree = gridRowTreeSelector(apiRef);\n  const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n  const groupNode = rowTree[groupId];\n  if (!groupNode || groupNode.type !== 'group') {\n    return [];\n  }\n  const descendants = [];\n  const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n  for (let index = startIndex; index < sortedRowIds.length && rowTree[sortedRowIds[index]]?.depth > groupNode.depth; index += 1) {\n    const id = sortedRowIds[index];\n    if (filteredRowsLookup[id] !== false && apiRef.current.isRowSelectable(id)) {\n      descendants.push(id);\n    }\n  }\n  return descendants;\n}\n\n// TODO v8: Use `createSelectorV8`\nexport function getCheckboxPropsSelector(groupId, autoSelectParents) {\n  return createSelector(gridRowTreeSelector, gridSortedRowIdsSelector, gridFilteredRowsLookupSelector, selectedIdsLookupSelector, (rowTree, sortedRowIds, filteredRowsLookup, rowSelectionLookup) => {\n    const groupNode = rowTree[groupId];\n    if (!groupNode || groupNode.type !== 'group') {\n      return {\n        isIndeterminate: false,\n        isChecked: rowSelectionLookup[groupId] === groupId\n      };\n    }\n    if (rowSelectionLookup[groupId] === groupId) {\n      return {\n        isIndeterminate: false,\n        isChecked: true\n      };\n    }\n    let selectableDescendentsCount = 0;\n    let selectedDescendentsCount = 0;\n    const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n    for (let index = startIndex; index < sortedRowIds.length && rowTree[sortedRowIds[index]]?.depth > groupNode.depth; index += 1) {\n      const id = sortedRowIds[index];\n      if (filteredRowsLookup[id] !== false) {\n        selectableDescendentsCount += 1;\n        if (rowSelectionLookup[id] !== undefined) {\n          selectedDescendentsCount += 1;\n        }\n      }\n    }\n    return {\n      isIndeterminate: selectedDescendentsCount > 0 && selectedDescendentsCount < selectableDescendentsCount || selectedDescendentsCount === selectableDescendentsCount && rowSelectionLookup[groupId] === undefined,\n      isChecked: autoSelectParents ? selectedDescendentsCount > 0 : rowSelectionLookup[groupId] === groupId\n    };\n  });\n}\nexport function isMultipleRowSelectionEnabled(props) {\n  if (props.signature === GridSignature.DataGrid) {\n    // DataGrid Community has multiple row selection enabled only if checkbox selection is enabled.\n    return props.checkboxSelection && props.disableMultipleRowSelection !== true;\n  }\n  return !props.disableMultipleRowSelection;\n}\nconst getRowNodeParents = (tree, id) => {\n  const parents = [];\n  let parent = id;\n  while (parent != null && parent !== GRID_ROOT_GROUP_ID) {\n    const node = tree[parent];\n    if (!node) {\n      return parents;\n    }\n    parents.push(parent);\n    parent = node.parent;\n  }\n  return parents;\n};\nconst getFilteredRowNodeSiblings = (tree, filteredRows, id) => {\n  const node = tree[id];\n  if (!node) {\n    return [];\n  }\n  const parent = node.parent;\n  if (parent == null) {\n    return [];\n  }\n  const parentNode = tree[parent];\n  return parentNode.children.filter(childId => childId !== id && filteredRows[childId]);\n};\nexport const findRowsToSelect = (apiRef, tree, selectedRow, autoSelectDescendants, autoSelectParents, addRow) => {\n  const filteredRows = gridFilteredRowsLookupSelector(apiRef);\n  const selectedIdsLookup = selectedIdsLookupSelector(apiRef);\n  const selectedDescendants = new Set([]);\n  if (!autoSelectDescendants && !autoSelectParents) {\n    return;\n  }\n  if (autoSelectDescendants) {\n    const rowNode = tree[selectedRow];\n    if (rowNode?.type === 'group') {\n      const descendants = getGridRowGroupSelectableDescendants(apiRef, selectedRow);\n      descendants.forEach(rowId => {\n        addRow(rowId);\n        selectedDescendants.add(rowId);\n      });\n    }\n  }\n  if (autoSelectParents) {\n    const checkAllDescendantsSelected = rowId => {\n      if (selectedIdsLookup[rowId] !== rowId && !selectedDescendants.has(rowId)) {\n        return false;\n      }\n      const node = tree[rowId];\n      if (node?.type !== 'group') {\n        return true;\n      }\n      return node.children.every(checkAllDescendantsSelected);\n    };\n    const traverseParents = rowId => {\n      const siblings = getFilteredRowNodeSiblings(tree, filteredRows, rowId);\n      if (siblings.length === 0 || siblings.every(checkAllDescendantsSelected)) {\n        const rowNode = tree[rowId];\n        const parent = rowNode.parent;\n        if (parent != null && parent !== GRID_ROOT_GROUP_ID && apiRef.current.isRowSelectable(parent)) {\n          addRow(parent);\n          selectedDescendants.add(parent);\n          traverseParents(parent);\n        }\n      }\n    };\n    traverseParents(selectedRow);\n  }\n};\nexport const findRowsToDeselect = (apiRef, tree, deselectedRow, autoSelectDescendants, autoSelectParents, removeRow) => {\n  const selectedIdsLookup = selectedIdsLookupSelector(apiRef);\n  if (!autoSelectParents && !autoSelectDescendants) {\n    return;\n  }\n  if (autoSelectParents) {\n    const allParents = getRowNodeParents(tree, deselectedRow);\n    allParents.forEach(parent => {\n      const isSelected = selectedIdsLookup[parent] === parent;\n      if (isSelected) {\n        removeRow(parent);\n      }\n    });\n  }\n  if (autoSelectDescendants) {\n    const rowNode = tree[deselectedRow];\n    if (rowNode?.type === 'group') {\n      const descendants = getGridRowGroupSelectableDescendants(apiRef, deselectedRow);\n      descendants.forEach(descendant => {\n        removeRow(descendant);\n      });\n    }\n  }\n};","map":{"version":3,"names":["GridSignature","GRID_ROOT_GROUP_ID","gridFilteredRowsLookupSelector","gridSortedRowIdsSelector","selectedIdsLookupSelector","gridRowTreeSelector","createSelector","ROW_SELECTION_PROPAGATION_DEFAULT","parents","descendants","getGridRowGroupSelectableDescendants","apiRef","groupId","rowTree","sortedRowIds","filteredRowsLookup","groupNode","type","startIndex","findIndex","id","index","length","depth","current","isRowSelectable","push","getCheckboxPropsSelector","autoSelectParents","rowSelectionLookup","isIndeterminate","isChecked","selectableDescendentsCount","selectedDescendentsCount","undefined","isMultipleRowSelectionEnabled","props","signature","DataGrid","checkboxSelection","disableMultipleRowSelection","getRowNodeParents","tree","parent","node","getFilteredRowNodeSiblings","filteredRows","parentNode","children","filter","childId","findRowsToSelect","selectedRow","autoSelectDescendants","addRow","selectedIdsLookup","selectedDescendants","Set","rowNode","forEach","rowId","add","checkAllDescendantsSelected","has","every","traverseParents","siblings","findRowsToDeselect","deselectedRow","removeRow","allParents","isSelected","descendant"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/hooks/features/rowSelection/utils.js"],"sourcesContent":["import { GridSignature } from \"../../utils/useGridApiEventHandler.js\";\nimport { GRID_ROOT_GROUP_ID } from \"../rows/gridRowsUtils.js\";\nimport { gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { gridSortedRowIdsSelector } from \"../sorting/gridSortingSelector.js\";\nimport { selectedIdsLookupSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { createSelector } from \"../../../utils/createSelector.js\";\nexport const ROW_SELECTION_PROPAGATION_DEFAULT = {\n  parents: false,\n  descendants: false\n};\nfunction getGridRowGroupSelectableDescendants(apiRef, groupId) {\n  const rowTree = gridRowTreeSelector(apiRef);\n  const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n  const groupNode = rowTree[groupId];\n  if (!groupNode || groupNode.type !== 'group') {\n    return [];\n  }\n  const descendants = [];\n  const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n  for (let index = startIndex; index < sortedRowIds.length && rowTree[sortedRowIds[index]]?.depth > groupNode.depth; index += 1) {\n    const id = sortedRowIds[index];\n    if (filteredRowsLookup[id] !== false && apiRef.current.isRowSelectable(id)) {\n      descendants.push(id);\n    }\n  }\n  return descendants;\n}\n\n// TODO v8: Use `createSelectorV8`\nexport function getCheckboxPropsSelector(groupId, autoSelectParents) {\n  return createSelector(gridRowTreeSelector, gridSortedRowIdsSelector, gridFilteredRowsLookupSelector, selectedIdsLookupSelector, (rowTree, sortedRowIds, filteredRowsLookup, rowSelectionLookup) => {\n    const groupNode = rowTree[groupId];\n    if (!groupNode || groupNode.type !== 'group') {\n      return {\n        isIndeterminate: false,\n        isChecked: rowSelectionLookup[groupId] === groupId\n      };\n    }\n    if (rowSelectionLookup[groupId] === groupId) {\n      return {\n        isIndeterminate: false,\n        isChecked: true\n      };\n    }\n    let selectableDescendentsCount = 0;\n    let selectedDescendentsCount = 0;\n    const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n    for (let index = startIndex; index < sortedRowIds.length && rowTree[sortedRowIds[index]]?.depth > groupNode.depth; index += 1) {\n      const id = sortedRowIds[index];\n      if (filteredRowsLookup[id] !== false) {\n        selectableDescendentsCount += 1;\n        if (rowSelectionLookup[id] !== undefined) {\n          selectedDescendentsCount += 1;\n        }\n      }\n    }\n    return {\n      isIndeterminate: selectedDescendentsCount > 0 && selectedDescendentsCount < selectableDescendentsCount || selectedDescendentsCount === selectableDescendentsCount && rowSelectionLookup[groupId] === undefined,\n      isChecked: autoSelectParents ? selectedDescendentsCount > 0 : rowSelectionLookup[groupId] === groupId\n    };\n  });\n}\nexport function isMultipleRowSelectionEnabled(props) {\n  if (props.signature === GridSignature.DataGrid) {\n    // DataGrid Community has multiple row selection enabled only if checkbox selection is enabled.\n    return props.checkboxSelection && props.disableMultipleRowSelection !== true;\n  }\n  return !props.disableMultipleRowSelection;\n}\nconst getRowNodeParents = (tree, id) => {\n  const parents = [];\n  let parent = id;\n  while (parent != null && parent !== GRID_ROOT_GROUP_ID) {\n    const node = tree[parent];\n    if (!node) {\n      return parents;\n    }\n    parents.push(parent);\n    parent = node.parent;\n  }\n  return parents;\n};\nconst getFilteredRowNodeSiblings = (tree, filteredRows, id) => {\n  const node = tree[id];\n  if (!node) {\n    return [];\n  }\n  const parent = node.parent;\n  if (parent == null) {\n    return [];\n  }\n  const parentNode = tree[parent];\n  return parentNode.children.filter(childId => childId !== id && filteredRows[childId]);\n};\nexport const findRowsToSelect = (apiRef, tree, selectedRow, autoSelectDescendants, autoSelectParents, addRow) => {\n  const filteredRows = gridFilteredRowsLookupSelector(apiRef);\n  const selectedIdsLookup = selectedIdsLookupSelector(apiRef);\n  const selectedDescendants = new Set([]);\n  if (!autoSelectDescendants && !autoSelectParents) {\n    return;\n  }\n  if (autoSelectDescendants) {\n    const rowNode = tree[selectedRow];\n    if (rowNode?.type === 'group') {\n      const descendants = getGridRowGroupSelectableDescendants(apiRef, selectedRow);\n      descendants.forEach(rowId => {\n        addRow(rowId);\n        selectedDescendants.add(rowId);\n      });\n    }\n  }\n  if (autoSelectParents) {\n    const checkAllDescendantsSelected = rowId => {\n      if (selectedIdsLookup[rowId] !== rowId && !selectedDescendants.has(rowId)) {\n        return false;\n      }\n      const node = tree[rowId];\n      if (node?.type !== 'group') {\n        return true;\n      }\n      return node.children.every(checkAllDescendantsSelected);\n    };\n    const traverseParents = rowId => {\n      const siblings = getFilteredRowNodeSiblings(tree, filteredRows, rowId);\n      if (siblings.length === 0 || siblings.every(checkAllDescendantsSelected)) {\n        const rowNode = tree[rowId];\n        const parent = rowNode.parent;\n        if (parent != null && parent !== GRID_ROOT_GROUP_ID && apiRef.current.isRowSelectable(parent)) {\n          addRow(parent);\n          selectedDescendants.add(parent);\n          traverseParents(parent);\n        }\n      }\n    };\n    traverseParents(selectedRow);\n  }\n};\nexport const findRowsToDeselect = (apiRef, tree, deselectedRow, autoSelectDescendants, autoSelectParents, removeRow) => {\n  const selectedIdsLookup = selectedIdsLookupSelector(apiRef);\n  if (!autoSelectParents && !autoSelectDescendants) {\n    return;\n  }\n  if (autoSelectParents) {\n    const allParents = getRowNodeParents(tree, deselectedRow);\n    allParents.forEach(parent => {\n      const isSelected = selectedIdsLookup[parent] === parent;\n      if (isSelected) {\n        removeRow(parent);\n      }\n    });\n  }\n  if (autoSelectDescendants) {\n    const rowNode = tree[deselectedRow];\n    if (rowNode?.type === 'group') {\n      const descendants = getGridRowGroupSelectableDescendants(apiRef, deselectedRow);\n      descendants.forEach(descendant => {\n        removeRow(descendant);\n      });\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}