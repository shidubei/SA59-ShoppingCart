{"ast":null,"code":"import * as React from 'react';\nimport { TimerBasedCleanupTracking } from \"../../utils/cleanupTracking/TimerBasedCleanupTracking.js\";\nimport { FinalizationRegistryBasedCleanupTracking } from \"../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js\";\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\nvar GridSignature = /*#__PURE__*/function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n  GridSignature[\"DataGridPremium\"] = \"DataGridPremium\";\n  return GridSignature;\n}(GridSignature || {});\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {}\n\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\nexport function createUseGridApiEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event, details);\n        }\n      };\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact,\n      // The callback below will be called once this reference stops being retained\n      () => {\n        subscription.current?.();\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            handlerRef.current?.(params, event, details);\n          }\n        };\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n      return () => {\n        subscription.current?.();\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registryContainer = {\n  registry: null\n};\n\n// TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_resetCleanupTracking = () => {\n  registryContainer.registry?.reset();\n  registryContainer.registry = null;\n};\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };","map":{"version":3,"names":["React","TimerBasedCleanupTracking","FinalizationRegistryBasedCleanupTracking","GridSignature","ObjectToBeRetainedByReact","createUseGridApiEventHandler","registryContainer","cleanupTokensCounter","useGridApiEventHandler","apiRef","eventName","handler","options","registry","FinalizationRegistry","objectRetainedByReact","useState","subscription","useRef","handlerRef","current","cleanupTokenRef","enhancedHandler","params","event","details","defaultMuiPrevented","subscribeEvent","cleanupToken","register","unregister","useEffect","unstable_resetCleanupTracking","reset","optionsSubscriberOptions","isFirst","useGridApiOptionHandler"],"sources":["D:/Documents/shopping-cart-react/shopping-cart/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js"],"sourcesContent":["import * as React from 'react';\nimport { TimerBasedCleanupTracking } from \"../../utils/cleanupTracking/TimerBasedCleanupTracking.js\";\nimport { FinalizationRegistryBasedCleanupTracking } from \"../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js\";\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\nvar GridSignature = /*#__PURE__*/function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n  GridSignature[\"DataGridPremium\"] = \"DataGridPremium\";\n  return GridSignature;\n}(GridSignature || {});\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {}\n\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\nexport function createUseGridApiEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event, details);\n        }\n      };\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact,\n      // The callback below will be called once this reference stops being retained\n      () => {\n        subscription.current?.();\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            handlerRef.current?.(params, event, details);\n          }\n        };\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n      return () => {\n        subscription.current?.();\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registryContainer = {\n  registry: null\n};\n\n// TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_resetCleanupTracking = () => {\n  registryContainer.registry?.reset();\n  registryContainer.registry = null;\n};\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}